var searchIndex = {};
searchIndex["abomonation"] = {"doc":"Abomonation (spelling intentional) is a fast serialization / deserialization crate.","items":[[5,"encode","abomonation","Encodes a typed reference into a binary buffer.",null,{"inputs":[{"name":"t"},{"name":"vec"}],"output":null}],[5,"decode","","Decodes a mutable binary slice into an immutable typed reference.",null,null],[8,"Abomonation","","Abomonation provides methods to serialize any heap data the implementor owns.",null,null],[11,"entomb","","Write any additional information about `&self` beyond its binary representation.",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"embalm","","Perform any final edits before committing `&mut self`. Importantly, this method should only manipulate the fields of `self`; any owned memory may not be valid.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"exhume","","Recover any information for `&mut self` not evident from its binary representation.",0,null],[14,"unsafe_abomonate","","The `unsafe_abomonate!` macro takes a type name with an optional list of fields, and implements `Abomonation` for the type, following the pattern of the tuple implementations: each method calls the equivalent method on each of its fields.",null,null]],"paths":[[8,"Abomonation"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",3,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",3,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",3,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",3,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",3,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",3,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",3,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",3,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",3,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",3,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",3,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",3,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",3,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",3,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",3,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",3,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",3,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"write_uint","","",5,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["differential_dataflow"] = {"doc":"Differential dataflow is a high-throughput, low-latency data-parallel programming framework.","items":[[0,"hashable","differential_dataflow","Traits and types related to the distribution of data.",null,null],[3,"OrdWrapper","differential_dataflow::hashable","A wrapper around hashable types that ensures an implementation of `Ord` that compares hash values first.",null,null],[12,"item","","The item, so you can grab it.",0,null],[3,"HashableWrapper","","Wrapper to stash hash value with the actual value.",null,null],[12,"item","","The item, for reference.",1,null],[3,"UnsignedWrapper","","A wrapper around an unsigned integer, providing `hashed` as the value itself.",null,null],[12,"item","","The item.",2,null],[8,"Hashable","","Types with a `hashed` method, producing an unsigned output of some type.",null,null],[16,"Output","","The type of the output value.",3,null],[10,"hashed","","A well-distributed integer derived from the data.",3,null],[8,"HashOrdered","","A marker trait for types whose `Ord` implementation orders first by `hashed()`.",null,null],[11,"entomb","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"embalm","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"exhume","","",0,null],[11,"entomb","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"embalm","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"exhume","","",1,null],[11,"entomb","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"embalm","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"exhume","","",2,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ordwrapper"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"ordwrapper"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"ordwrapper"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"ordwrapper"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hashed","","",0,null],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"hashablewrapper"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"hashablewrapper"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hashed","","",1,null],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"hashablewrapper"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unsignedwrapper"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"unsignedwrapper"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hashed","","",2,null],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"operators","differential_dataflow","Specialize differential dataflow operators.",null,null],[0,"arrange","differential_dataflow::operators","Arranges a collection into a re-usable trace structure.",null,null],[3,"BatchWrapper","differential_dataflow::operators::arrange","Wrapper type to permit transfer of `Rc` types, as in batch.",null,null],[12,"item","","The wrapped item.",4,null],[3,"TraceWriter","","A trace writer capability.",null,null],[3,"TraceAgent","","A `TraceReader` wrapper which can be imported into other dataflows.",null,null],[3,"Arranged","","An arranged collection of `(K,V)` values.",null,null],[12,"stream","","A stream containing arranged updates.",5,null],[12,"trace","","A shared trace, updated by the `Arrange` operator and readable by others.",5,null],[8,"Arrange","","Arranges something as `(Key,Val)` pairs according to a type `T` of trace.",null,null],[10,"arrange","","Arranges a stream of `(Key, Val)` updates by `Key`. Accepts an empty instance of the trace type.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"arranged"}}],[8,"ArrangeByKey","","Arranges something as `(Key,Val)` pairs according to a type `T` of trace.",null,null],[10,"arrange_by_key_hashed","","Arranges a collection of `(Key, Val)` records by `Key`.",7,{"inputs":[{"name":"self"}],"output":{"name":"arranged"}}],[10,"arrange_by_key_hashed_cached","","Arranges a collection of `(Key, Val)` records by `Key`.",7,{"inputs":[{"name":"self"}],"output":{"name":"arranged"}}],[8,"ArrangeBySelf","","Arranges something as `(Key, ())` pairs according to a type `T` of trace.",null,null],[10,"arrange_by_self","","Arranges a collection of `Key` records by `Key`.",8,{"inputs":[{"name":"self"}],"output":{"name":"arranged"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"batchwrapper"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"batchwrapper"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"batchwrapper"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"entomb","","",4,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"embalm","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"exhume","","",4,null],[11,"seal","","Advances the trace to `frontier`, providing batch data if it exists.",9,null],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"advance_by","","",10,null],[11,"advance_frontier","","",10,null],[11,"distinguish_since","","",10,null],[11,"distinguish_frontier","","",10,null],[11,"cursor_through","","",10,null],[11,"map_batches","","",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"new","","Creates a new agent from a trace reader.",10,null],[11,"new_listener","","Attaches a new shared queue to the trace.",10,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"import","","Copies an existing collection into the supplied scope.",10,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"arranged"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"enter","","Brings an arranged collection into a nested scope.",5,{"inputs":[{"name":"self"},{"name":"child"}],"output":{"name":"arranged"}}],[11,"as_collection","","Flattens the stream into a `Collection`.",5,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[0,"group","differential_dataflow::operators","Group records by a key, and apply a reduction function.",null,null],[5,"consolidate_from","differential_dataflow::operators::group","Scans `vec[off..]` and consolidates differences of adjacent equivalent elements.",null,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[8,"Group","","Extension trait for the `group` differential dataflow method.",null,null],[10,"group","","Groups records by their first field, and applies reduction logic to the associated values.",11,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[10,"group_u","","Groups records by their first field, and applies reduction logic to the associated values.",11,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[8,"Distinct","","Extension trait for the `distinct` differential dataflow method.",null,null],[10,"distinct","","Reduces the collection to one occurrence of each distinct element.",12,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[10,"distinct_u","","Reduces the collection to one occurrence of each distinct element.",12,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[8,"Count","","Extension trait for the `count` differential dataflow method.",null,null],[10,"count","","Counts the number of occurrences of each element.",13,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[10,"count_u","","Counts the number of occurrences of each element.",13,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[8,"GroupArranged","","Extension trait for the `group_arranged` differential dataflow method.",null,null],[10,"group_arranged","","Applies `group` to arranged data, and returns an arrangement of output data.",14,{"inputs":[{"name":"self"},{"name":"l"},{"name":"t2"}],"output":{"name":"arranged"}}],[11,"group_arranged","differential_dataflow::operators::arrange","",5,{"inputs":[{"name":"self"},{"name":"l"},{"name":"t2"}],"output":{"name":"arranged"}}],[0,"consolidate","differential_dataflow::operators","Aggregates the weights of equal records into at most one record.",null,null],[8,"Consolidate","differential_dataflow::operators::consolidate","An extension method for consolidating weighted streams.",null,null],[10,"consolidate","","Aggregates the weights of equal records into at most one record.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"iterate","differential_dataflow::operators","Iterative application of a differential dataflow fragment.",null,null],[3,"Variable","differential_dataflow::operators::iterate","A differential dataflow collection variable",null,null],[8,"Iterate","","An extension trait for the `iterate` method.",null,null],[10,"iterate","","Iteratively apply `logic` to the source collection until convergence.",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"collection"}}],[11,"from","","Creates a new `Variable` and a `Stream` representing its output, from a supplied `source` stream.",17,{"inputs":[{"name":"collection"}],"output":{"name":"variable"}}],[11,"set","","Adds a new source of data to the `Variable`.",17,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[11,"deref","","",17,null],[0,"join","differential_dataflow::operators","Match pairs of records based on a key.",null,null],[8,"Join","differential_dataflow::operators::join","Join implementations for `(key,val)` data.",null,null],[11,"join","","Matches pairs `(key,val1)` and `(key,val2)` based on `key` and then applies a function.",18,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[10,"join_map","","Matches pairs `(key,val1)` and `(key,val2)` based on `key` and then applies a function.",18,{"inputs":[{"name":"self"},{"name":"collection"},{"name":"l"}],"output":{"name":"collection"}}],[10,"semijoin","","Matches pairs `(key, val)` and `key` based on `key`, producing the former with frequencies multiplied.",18,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[10,"antijoin","","Matches pairs `(key, val)` and `key` based on `key`, discarding values in the first collection if their key is present in the second.",18,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[8,"JoinUnsigned","","Join implementations for `(key,val)` data.",null,null],[11,"join_u","","Matches pairs `(key,val1)` and `(key,val2)` based on `key` and then applies a function.",19,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[10,"join_map_u","","Matches pairs `(key,val1)` and `(key,val2)` based on `key` and then applies a function.",19,{"inputs":[{"name":"self"},{"name":"collection"},{"name":"l"}],"output":{"name":"collection"}}],[10,"semijoin_u","","Matches pairs `(key,val1)` and `key` based on `key`, filtering the first collection by values present in the second.",19,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[10,"antijoin_u","","Matches pairs `(key,val1)` and `key` based on `key`, discarding values in the first collection if their key is present in the second.",19,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[8,"JoinCore","","Matches the elements of two arranged traces.",null,null],[10,"join_core","","Joins two arranged collections with the same key type.",20,{"inputs":[{"name":"self"},{"name":"arranged"},{"name":"l"}],"output":{"name":"collection"}}],[11,"join_core","differential_dataflow::operators::arrange","",5,{"inputs":[{"name":"self"},{"name":"arranged"},{"name":"l"}],"output":{"name":"collection"}}],[0,"count","differential_dataflow::operators","Group records by a key, and apply a reduction function.",null,null],[8,"CountTotal","differential_dataflow::operators::count","Extension trait for the `count` differential dataflow method.",null,null],[10,"count_total","","Counts the number of occurrences of each element.",21,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[10,"count_total_u","","Counts the number of occurrences of each element.",21,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[8,"CountTotalCore","","Extension trait for the `group_arranged` differential dataflow method.",null,null],[10,"count_total_core","","Applies `group` to arranged data, and returns an arrangement of output data.",22,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[11,"count_total_core","differential_dataflow::operators::arrange","",5,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[0,"lattice","differential_dataflow","Partially ordered elements with a least upper bound.",null,null],[8,"Lattice","differential_dataflow::lattice","A bounded partially ordered type supporting joins and meets.",null,null],[10,"min","","The smallest element of the type.",23,{"inputs":[],"output":{"name":"self"}}],[10,"max","","The largest element of the type.",23,{"inputs":[],"output":{"name":"self"}}],[10,"join","","The smallest element greater than or equal to both arguments.",23,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"meet","","The largest element less than or equal to both arguments.",23,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"advance_by","","Advances self to the largest time indistinguishable under `frontier`.",23,null],[8,"TotalOrder","","A carrier trait for totally ordered lattices.",null,null],[8,"Empty","","A type that does not affect total orderedness.",null,null],[0,"trace","differential_dataflow","Traits and datastructures representing a collection trace.",null,null],[5,"consolidate","differential_dataflow::trace","Scans `vec[off..]` and consolidates differences of adjacent equivalent elements.",null,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[5,"consolidate_by","","Scans `vec[off..]` and consolidates differences of adjacent equivalent elements.",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"l"}],"output":null}],[0,"cursor","","Traits and types for navigating order sequences of update tuples.",null,null],[0,"cursor_list","differential_dataflow::trace::cursor","A generic cursor implementation merging multiple cursors.",null,null],[3,"CursorList","differential_dataflow::trace::cursor::cursor_list","Provides a cursor interface over a list of cursors.",null,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new cursor list from pre-existing cursors.",24,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"key_valid","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"val_valid","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"key","","",24,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"val","","",24,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"map_times","","",24,{"inputs":[{"name":"self"},{"name":"l"}],"output":null}],[11,"step_key","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"seek_key","","",24,{"inputs":[{"name":"self"},{"name":"k"}],"output":null}],[11,"step_val","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"seek_val","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"rewind_keys","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"rewind_vals","","",24,{"inputs":[{"name":"self"}],"output":null}],[8,"Cursor","differential_dataflow::trace::cursor","A cursor for navigating ordered `(key, val, time, diff)` updates.",null,null],[10,"key_valid","","Indicates if the current key is valid.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"val_valid","","Indicates if the current value is valid.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"key","","A reference to the current key. Asserts if invalid.",25,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[10,"val","","A reference to the current value. Asserts if invalid.",25,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[10,"map_times","","Applies `logic` to each pair of time and difference. Intended for mutation of the closure's scope.",25,{"inputs":[{"name":"self"},{"name":"l"}],"output":null}],[10,"step_key","","Advances the cursor to the next key. Indicates if the key is valid.",25,{"inputs":[{"name":"self"}],"output":null}],[10,"seek_key","","Advances the cursor to the specified key. Indicates if the key is valid.",25,{"inputs":[{"name":"self"},{"name":"k"}],"output":null}],[10,"step_val","","Advances the cursor to the next value. Indicates if the value is valid.",25,{"inputs":[{"name":"self"}],"output":null}],[10,"seek_val","","Advances the cursor to the specified value. Indicates if the value is valid.",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[10,"rewind_keys","","Rewinds the cursor to the first key.",25,{"inputs":[{"name":"self"}],"output":null}],[10,"rewind_vals","","Rewinds the cursor to the first value for current key.",25,{"inputs":[{"name":"self"}],"output":null}],[8,"CursorDebug","","Debugging and testing utilities for Cursor.",null,null],[11,"to_vec","","Rewinds the cursor and outputs its contents to a Vec",26,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"description","differential_dataflow::trace","Descriptions of intervals of partially ordered times.",null,null],[3,"Description","differential_dataflow::trace::description","Describes an interval of partially ordered times.",null,null],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new description from its component parts.",27,null],[11,"lower","","The lower envelope for times in the interval.",27,null],[11,"upper","","The upper envelope for times in the interval.",27,null],[11,"since","","Times from whose future the interval may be observed.",27,null],[0,"implementations","differential_dataflow::trace","Implementations of `Trace` and associated traits.",null,null],[3,"Batcher","differential_dataflow::trace::implementations","Creates batches from unordered tuples.",null,null],[0,"spine","","An append-only collection of update batches.",null,null],[3,"Spine","differential_dataflow::trace::implementations::spine","An append-only collection of update tuples.",null,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cursor_through","","",28,null],[11,"advance_by","","",28,null],[11,"advance_frontier","","",28,null],[11,"distinguish_since","","",28,null],[11,"distinguish_frontier","","",28,null],[11,"map_batches","","",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"new","","",28,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","",28,null],[11,"new","differential_dataflow::trace::implementations","",29,{"inputs":[],"output":{"name":"self"}}],[11,"push_batch","","",29,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"seal","","",29,null],[11,"frontier","","",29,null],[0,"ord","","Trace and batch implementations based on sorted ranges.",null,null],[3,"OrdValBatch","differential_dataflow::trace::implementations::ord","An immutable collection of update tuples, from a contiguous interval of logical times.",null,null],[12,"layer","","Where all the dataz is.",30,null],[12,"desc","","Description of the update times this layer represents.",30,null],[3,"OrdValCursor","","A cursor for navigating a single layer.",null,null],[3,"OrdValBuilder","","A builder for creating layers from unsorted update tuples.",null,null],[3,"OrdKeyBatch","","An immutable collection of update tuples, from a contiguous interval of logical times.",null,null],[12,"layer","","Where all the dataz is.",31,null],[12,"desc","","Description of the update times this layer represents.",31,null],[3,"OrdKeyCursor","","A cursor for navigating a single layer.",null,null],[3,"OrdKeyBuilder","","A builder for creating layers from unsorted update tuples.",null,null],[6,"OrdValSpine","","A trace implementation using a spine of hash-map batches.",null,null],[6,"OrdKeySpine","","A trace implementation for empty values using a spine of hash-map batches.",null,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cursor","","",30,null],[11,"len","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"description","","",30,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"merge","","",30,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"key","","",32,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"val","","",32,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"map_times","","",32,{"inputs":[{"name":"self"},{"name":"l"}],"output":null}],[11,"key_valid","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"val_valid","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"step_key","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"seek_key","","",32,{"inputs":[{"name":"self"},{"name":"k"}],"output":null}],[11,"step_val","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"seek_val","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"rewind_keys","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"rewind_vals","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",33,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","",33,null],[11,"done","","",33,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cursor","","",31,null],[11,"len","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"description","","",31,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"merge","","",31,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"key","","",34,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"val","","",34,null],[11,"map_times","","",34,{"inputs":[{"name":"self"},{"name":"l"}],"output":null}],[11,"key_valid","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"val_valid","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"step_key","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"seek_key","","",34,{"inputs":[{"name":"self"},{"name":"k"}],"output":null}],[11,"step_val","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"seek_val","","",34,null],[11,"rewind_keys","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"rewind_vals","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",35,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","",35,null],[11,"done","","",35,null],[0,"hash","differential_dataflow::trace::implementations","Trace and batch implementations based on Robin Hood hashing.",null,null],[3,"HashValBatch","differential_dataflow::trace::implementations::hash","An immutable collection of update tuples, from a contiguous interval of logical times.",null,null],[12,"layer","","Where all the dataz is.",36,null],[12,"desc","","Description of the update times this layer represents.",36,null],[3,"HashValCursor","","A cursor for navigating a single layer.",null,null],[3,"HashValBuilder","","A builder for creating layers from unsorted update tuples.",null,null],[3,"HashKeyBatch","","An immutable collection of update tuples, from a contiguous interval of logical times.",null,null],[12,"layer","","Where all the dataz is.",37,null],[12,"desc","","Description of the update times this layer represents.",37,null],[3,"HashKeyCursor","","A cursor for navigating a single layer.",null,null],[3,"HashKeyBuilder","","A builder for creating layers from unsorted update tuples.",null,null],[6,"HashValSpine","","A trace implementation using a spine of hash-map batches.",null,null],[6,"HashKeySpine","","A trace implementation for empty values using a spine of hash-map batches.",null,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cursor","","",36,null],[11,"len","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"description","","",36,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"merge","","",36,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"key","","",38,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"val","","",38,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"map_times","","",38,{"inputs":[{"name":"self"},{"name":"l"}],"output":null}],[11,"key_valid","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"val_valid","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"step_key","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"seek_key","","",38,{"inputs":[{"name":"self"},{"name":"k"}],"output":null}],[11,"step_val","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"seek_val","","",38,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"rewind_keys","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"rewind_vals","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","",39,null],[11,"done","","",39,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cursor","","",37,null],[11,"len","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"description","","",37,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"merge","","",37,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"key","","",40,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"val","","",40,null],[11,"map_times","","",40,{"inputs":[{"name":"self"},{"name":"l"}],"output":null}],[11,"key_valid","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"val_valid","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"step_key","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"seek_key","","",40,{"inputs":[{"name":"self"},{"name":"k"}],"output":null}],[11,"step_val","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"seek_val","","",40,null],[11,"rewind_keys","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"rewind_vals","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",41,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","",41,null],[11,"done","","",41,null],[0,"layers","differential_dataflow::trace","Traits and types for building trie-based indices.",null,null],[0,"ordered","differential_dataflow::trace::layers","Implementation using ordered keys and exponential search.",null,null],[3,"OrderedLayer","differential_dataflow::trace::layers::ordered","A level of the trie, with keys and offsets into a lower layer.",null,null],[12,"keys","","The keys of the layer.",42,null],[12,"offs","","The offsets associate with each key.",42,null],[12,"vals","","The ranges of values associated with the keys.",42,null],[3,"OrderedBuilder","","Assembles a layer of this",null,null],[12,"keys","","Keys",43,null],[12,"offs","","Offsets",43,null],[12,"vals","","The next layer down",43,null],[3,"OrderedCursor","","A cursor with a child cursor that is updated as we move.",null,null],[12,"child","","The cursor for the trie layer below this one.",44,null],[5,"advance","","Reports the number of elements satisfing the predicate.",null,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"keys","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"tuples","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cursor_from","","",42,null],[11,"boundary","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"done","","",43,null],[11,"with_capacity","","",43,null],[11,"copy_range","","",43,null],[11,"push_merge","","",43,null],[11,"new","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",43,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push_tuple","","",43,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"key","","",44,null],[11,"step","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"seek","","",44,null],[11,"valid","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"rewind","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"reposition","","",44,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"ordered_leaf","differential_dataflow::trace::layers","Implementation using ordered keys and exponential search.",null,null],[3,"OrderedLeaf","differential_dataflow::trace::layers::ordered_leaf","A layer of unordered values.",null,null],[12,"vals","","Unordered values.",45,null],[3,"OrderedLeafBuilder","","A builder for unordered values.",null,null],[12,"vals","","Unordered values.",46,null],[3,"OrderedLeafCursor","","A cursor for walking through an unordered sequence of values.",null,null],[5,"advance","","Reports the number of elements satisfing the predicate.",null,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"keys","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"tuples","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cursor_from","","",45,null],[11,"boundary","","",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"done","","",46,null],[11,"with_capacity","","",46,null],[11,"copy_range","","",46,null],[11,"push_merge","","",46,null],[11,"new","","",46,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",46,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push_tuple","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"key","","",47,null],[11,"step","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"seek","","",47,null],[11,"valid","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"rewind","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"reposition","","",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"hashed","differential_dataflow::trace::layers","Implementation using ordered keys with hashes and robin hood hashing.",null,null],[3,"HashedLayer","differential_dataflow::trace::layers::hashed","A level of the trie, with keys and offsets into a lower layer.",null,null],[12,"keys","","Keys and offsets for the keys.",48,null],[12,"vals","","A lower layer containing ranges of values.",48,null],[3,"Entry","","An entry in hash tables.",null,null],[3,"HashedBuilder","","Assembles a layer of this",null,null],[12,"keys","","Entries in the hash map.",49,null],[12,"vals","","A builder for the layer below.",49,null],[3,"HashedCursor","","A cursor with a child cursor that is updated as we move.",null,null],[12,"child","","A cursor for the layer below this one.",50,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"keys","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"tuples","","",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cursor_from","","",48,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"boundary","","Looks at the contents of self.temp and extends self.keys appropriately.",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"done","","",49,null],[11,"with_capacity","","",49,null],[11,"copy_range","","Copies fully formed ranges (note plural) of keys from another trie.",49,null],[11,"push_merge","","",49,null],[11,"new","","",49,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",49,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push_tuple","","",49,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"key","","",50,null],[11,"step","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"seek","","",50,null],[11,"valid","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"rewind","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"reposition","","",50,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"weighted","differential_dataflow::trace::layers","Implementation using ordered keys and exponential search.",null,null],[3,"WeightedLayer","differential_dataflow::trace::layers::weighted","A layer with sorted keys and integer weights.",null,null],[12,"keys","","Keys.",52,null],[12,"wgts","","Weights.",52,null],[3,"WeightedBuilder","","A builder for a weighted layer.",null,null],[12,"keys","","Keys.",53,null],[12,"wgts","","Weights.",53,null],[3,"WeightedCursor","","A cursor with a child cursor that is updated as we move.",null,null],[5,"advance","","Reports the number of elements satisfing the predicate.",null,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"keys","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"tuples","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cursor_from","","",52,null],[11,"boundary","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"done","","",53,null],[11,"with_capacity","","",53,null],[11,"copy_range","","",53,null],[11,"push_merge","","",53,null],[11,"new","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",53,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push_tuple","","",53,null],[11,"weight","","Recovers the weight of the item.",54,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"key","","",54,null],[11,"step","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"seek","","",54,null],[11,"valid","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"rewind","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"reposition","","",54,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"unordered","differential_dataflow::trace::layers","Implementation using ordered keys and exponential search.",null,null],[3,"UnorderedLayer","differential_dataflow::trace::layers::unordered","A layer of unordered values.",null,null],[12,"vals","","Unordered values.",55,null],[3,"UnorderedBuilder","","A builder for unordered values.",null,null],[12,"vals","","Unordered values.",56,null],[3,"UnorderedCursor","","A cursor for walking through an unordered sequence of values.",null,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"keys","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"tuples","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cursor_from","","",55,null],[11,"boundary","","",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"done","","",56,null],[11,"with_capacity","","",56,null],[11,"copy_range","","",56,null],[11,"push_merge","","",56,null],[11,"new","","",56,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",56,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push_tuple","","",56,{"inputs":[{"name":"self"},{"name":"k"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"key","","",57,null],[11,"step","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"seek","","",57,null],[11,"valid","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"rewind","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"reposition","","",57,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[8,"Trie","differential_dataflow::trace::layers","A collection of tuples, and types for building and enumerating them.",null,null],[16,"Item","","The type of item from which the type is constructed.",58,null],[16,"Cursor","","The type of cursor used to navigate the type.",58,null],[16,"MergeBuilder","","The type used to merge instances of the type together.",58,null],[16,"TupleBuilder","","The type used to assemble instances of the type from its `Item`s.",58,null],[10,"keys","","The number of distinct keys, as distinct from the total number of tuples.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"tuples","","The total number of tuples in the collection.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cursor","","Returns a cursor capable of navigating the collection.",58,null],[10,"cursor_from","","Returns a cursor over a range of data, commonly used by others to restrict navigation to sub-collections.",58,null],[11,"merge","","Merges two collections into a third.",58,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Builder","","A type used to assemble collections.",null,null],[16,"Trie","","The type of collection produced.",59,null],[10,"boundary","","Requests a commitment to the offset of the current-most sub-collection.",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"done","","Finalizes the building process and returns the collection.",59,null],[8,"MergeBuilder","","A type used to assemble collections by merging other instances.",null,null],[10,"with_capacity","","Allocates an instance of the builder with sufficient capacity to contain the merged data.",60,null],[10,"copy_range","","Copies sub-collections of `other` into this collection.",60,null],[10,"push_merge","","Merges two sub-collections into one sub-collection.",60,null],[8,"TupleBuilder","","A type used to assemble collections from ordered sequences of tuples.",null,null],[16,"Item","","The type of item accepted for construction.",61,null],[10,"new","","Allocates a new builder.",61,{"inputs":[],"output":{"name":"self"}}],[10,"with_capacity","","Allocates a new builder with capacity for at least `cap` tuples.",61,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"push_tuple","","Inserts a new into the collection.",61,null],[8,"Cursor","","A type supporting navigation.",null,null],[16,"Key","","The type revealed by the cursor.",62,null],[10,"key","","Reveals the current key.",62,null],[10,"step","","Advances the cursor by one element.",62,{"inputs":[{"name":"self"}],"output":null}],[10,"seek","","Advances the cursor until the location where `key` would be expected.",62,null],[10,"valid","","Returns `true` if the cursor points at valid data. Returns `false` if the cursor is exhausted.",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"rewind","","Rewinds the cursor to its initial state.",62,{"inputs":[{"name":"self"}],"output":null}],[10,"reposition","","Repositions the cursor to a different range of values.",62,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"wrappers","differential_dataflow::trace","Wrappers around trace implementations, providing derived views of updates.",null,null],[0,"enter","differential_dataflow::trace::wrappers","Wrappers to provide trace access to nested scopes.",null,null],[3,"TraceEnter","differential_dataflow::trace::wrappers::enter","Wrapper to provide trace to nested scope.",null,null],[3,"BatchEnter","","Wrapper to provide batch to nested scope.",null,null],[3,"CursorEnter","","Wrapper to provide cursor to nested scope.",null,null],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"map_batches","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"advance_by","","",63,null],[11,"advance_frontier","","",63,null],[11,"distinguish_since","","",63,null],[11,"distinguish_frontier","","",63,null],[11,"cursor_through","","",63,null],[11,"make_from","","Makes a new trace wrapper",63,{"inputs":[{"name":"tr"}],"output":{"name":"self"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cursor","","",64,null],[11,"len","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"description","","",64,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"make_from","","Makes a new batch wrapper",64,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"key_valid","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"val_valid","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"key","","",65,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"val","","",65,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"map_times","","",65,{"inputs":[{"name":"self"},{"name":"l"}],"output":null}],[11,"step_key","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"seek_key","","",65,{"inputs":[{"name":"self"},{"name":"k"}],"output":null}],[11,"step_val","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"seek_val","","",65,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"rewind_keys","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"rewind_vals","","",65,{"inputs":[{"name":"self"}],"output":null}],[0,"rc","differential_dataflow::trace::wrappers","A reference-counted wrapper sharing one owned trace.",null,null],[3,"TraceBox","differential_dataflow::trace::wrappers::rc","A wrapper around a trace which tracks the frontiers of all referees.",null,null],[12,"advance_frontiers","","accumulated holds on times for advancement.",66,null],[12,"through_frontiers","","accumulated holds on times for distinction.",66,null],[12,"trace","","The wrapped trace.",66,null],[3,"TraceRc","","A handle to a shared trace.",null,null],[12,"wrapper","","Wrapped trace. Please be gentle when using.",67,null],[11,"new","","Moves an existing trace into a shareable trace wrapper.",66,{"inputs":[{"name":"tr"}],"output":{"name":"self"}}],[11,"adjust_advance_frontier","","Replaces elements of `lower` with those of `upper`.",66,null],[11,"adjust_through_frontier","","Replaces elements of `lower` with those of `upper`.",66,null],[11,"advance_by","","Sets frontier to now be elements in `frontier`.",67,null],[11,"advance_frontier","","",67,null],[11,"distinguish_since","","Allows the trace to compact batches of times before `frontier`.",67,null],[11,"distinguish_frontier","","",67,null],[11,"cursor_through","","Creates a new cursor over the wrapped trace.",67,null],[11,"map_batches","","",67,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"make_from","","Allocates a new handle from an existing wrapped wrapper.",67,null],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",67,{"inputs":[{"name":"self"}],"output":null}],[8,"TraceReader","differential_dataflow::trace","A trace whose contents may be read.",null,null],[16,"Batch","","The type of an immutable collection of updates.",68,null],[16,"Cursor","","The type used to enumerate the collections contents.",68,null],[11,"cursor","","Provides a cursor over updates contained in the trace.",68,null],[10,"cursor_through","","Acquires a cursor to the restriction of the collection's contents to updates at times not greater or equal to an element of `upper`.",68,null],[10,"advance_by","","Advances the frontier of times the collection must be correctly accumulable through.",68,null],[10,"advance_frontier","","Reports the frontier from which all time comparisions should be accurate.",68,null],[10,"distinguish_since","","Advances the frontier that may be used in `cursor_through`.",68,null],[10,"distinguish_frontier","","Reports the frontier from which the collection may be subsetted.",68,null],[10,"map_batches","","Maps some logic across the batches the collection manages.",68,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"Trace","","An append-only collection of `(key, val, time, diff)` tuples.",null,null],[10,"new","","Allocates a new empty trace.",69,{"inputs":[],"output":{"name":"self"}}],[10,"insert","","Introduces a batch of updates to the trace.",69,null],[8,"BatchReader","","A batch of updates whose contents may be read.",null,null],[16,"Cursor","","The type used to enumerate the batch's contents.",70,null],[10,"cursor","","Acquires a cursor to the batch's contents.",70,null],[10,"len","","The number of updates in the batch.",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"description","","Describes the times of the updates in the batch.",70,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"lower","","All times in the batch are greater or equal to an element of `lower`.",70,null],[11,"upper","","All times in the batch are not greater or equal to any element of `upper`.",70,null],[8,"Batch","","An immutable collection of updates.",null,null],[16,"Batcher","","A type used to assemble batches from disordered updates.",71,null],[16,"Builder","","A type used to assemble batches from ordered update sequences.",71,null],[10,"merge","","Merges two consecutive batches.",71,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"advance_ref","","Advance times to `frontier` creating a new batch.",71,null],[11,"advance_mut","","Advance times to `frontier` updating this batch.",71,null],[8,"Batcher","","Functionality for collecting and batching updates.",null,null],[10,"new","","Allocates a new empty batcher.",72,{"inputs":[],"output":{"name":"self"}}],[10,"push_batch","","Adds an unordered batch of elements to the batcher.",72,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[10,"seal","","Returns all updates not greater or equal to an element of `upper`.",72,null],[10,"frontier","","Returns the lower envelope of contained update times.",72,null],[8,"Builder","","Functionality for building batches from ordered update sequences.",null,null],[10,"new","","Allocates an empty builder.",73,{"inputs":[],"output":{"name":"self"}}],[10,"with_capacity","","Allocates an empty builder with some capacity.",73,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"push","","Adds an element to the batch.",73,null],[11,"extend","","Adds an ordered sequence of elements to the batch.",73,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[10,"done","","Completes building and returns the batch.",73,null],[0,"input","differential_dataflow","Input sessions for simplified collection updates.",null,null],[3,"InputSession","differential_dataflow::input","An input session wrapping a single timely dataflow capability.",null,null],[8,"Input","","Create a new collection and input handle to control the collection.",null,null],[10,"new_collection","","Create a new collection and input handle to subsequently control the collection.",74,null],[10,"new_collection_from","","Create a new collection and input handle from initial data.",74,null],[11,"insert","","Adds an element to the collection.",75,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"remove","","Removes an element from the collection.",75,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"from","","Creates a new session from a reference to an input handle.",75,{"inputs":[{"name":"handle"}],"output":{"name":"self"}}],[11,"update","","Adds to the weight of an element in the collection.",75,{"inputs":[{"name":"self"},{"name":"d"},{"name":"r"}],"output":null}],[11,"flush","","Forces buffered data into the timely dataflow input, and advances its time to match that of the session.",75,{"inputs":[{"name":"self"}],"output":null}],[11,"advance_to","","Advances the logical time for future records.",75,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"epoch","","Reveals the current time of the session.",75,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"time","","Reveals the current time of the session.",75,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"close","","Closes the input, flushing and sealing the wrapped timely input.",75,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",75,{"inputs":[{"name":"self"}],"output":null}],[0,"difference","differential_dataflow","A type that can be treated as a difference.",null,null],[3,"DiffPair","differential_dataflow::difference","The difference defined by a pair of difference elements.",null,null],[12,"element1","","The first element in the pair.",76,null],[12,"element2","","The second element in the pair.",76,null],[8,"Diff","","A type that can be treated as a difference.",null,null],[10,"is_zero","","Returns true if the element is the additive identity.",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"zero","","The additive identity.",77,{"inputs":[],"output":{"name":"self"}}],[11,"cmp","","",76,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"option"}}],[11,"lt","","",76,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"bool"}}],[11,"le","","",76,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"bool"}}],[11,"gt","","",76,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"bool"}}],[11,"ge","","",76,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"bool"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"bool"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"diffpair"}}],[11,"new","","Creates a new Diff pair from two elements.",76,{"inputs":[{"name":"r1"},{"name":"r2"}],"output":{"name":"self"}}],[11,"is_zero","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"add","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",76,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"neg","","",76,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",76,null],[0,"collection","differential_dataflow","Types and traits associated with collections of data.",null,null],[3,"Collection","differential_dataflow::collection","A mutable collection of values of type `D`",null,null],[12,"inner","","The underlying timely dataflow stream.",78,null],[8,"AsCollection","","Conversion to a differential dataflow Collection.",null,null],[10,"as_collection","","Converts the type to a differential dataflow collection.",79,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[11,"new","","Creates a new Collection from a timely dataflow stream.",78,{"inputs":[{"name":"stream"}],"output":{"name":"collection"}}],[11,"map","","Creates a new collection by applying the supplied function to each input element.",78,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"map_in_place","","Creates a new collection by applying the supplied function to each input element.",78,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"flat_map","","Creates a new collection by applying the supplied function to each input element and accumulating the results.",78,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"negate","","Creates a new collection whose counts are the negation of those in the input.",78,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[11,"filter","","Creates a new collection containing those input records satisfying the supplied predicate.",78,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"concat","","Creates a new collection accumulating the contents of the two collections.",78,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[11,"explode","","Replaces each record with another, with a new difference type.",78,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"enter","","Brings a Collection into a nested scope.",78,{"inputs":[{"name":"self"},{"name":"child"}],"output":{"name":"collection"}}],[11,"enter_at","","Brings a Collection into a nested scope, at varying times.",78,{"inputs":[{"name":"self"},{"name":"child"},{"name":"f"}],"output":{"name":"collection"}}],[11,"inspect","","Applies a supplied function to each update.",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"collection"}}],[11,"inspect_batch","","Applies a supplied function to each batch of updates.",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"collection"}}],[11,"probe","","Attaches a timely dataflow probe to the output of a Collection.",78,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"probe_with","","Attaches a timely dataflow probe to the output of a Collection.",78,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"collection"}}],[11,"assert_eq","","Assert if the collections are ever different.",78,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"assert_empty","","Assert if the collection is ever non-empty.",78,{"inputs":[{"name":"self"}],"output":null}],[11,"scope","","The scope containing the underlying timely dataflow stream.",78,{"inputs":[{"name":"self"}],"output":{"name":"g"}}],[11,"leave","","Returns the final value of a Collection from a nested scope to its containing scope.",78,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[8,"Data","differential_dataflow","A composite trait for data types usable in differential dataflow.",null,null],[11,"arrange","differential_dataflow::collection","",78,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"arranged"}}],[11,"arrange_by_key_hashed","","",78,{"inputs":[{"name":"self"}],"output":{"name":"arranged"}}],[11,"arrange_by_key_hashed_cached","","",78,{"inputs":[{"name":"self"}],"output":{"name":"arranged"}}],[11,"arrange_by_self","","",78,{"inputs":[{"name":"self"}],"output":{"name":"arranged"}}],[11,"group","","",78,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"group_u","","",78,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"distinct","","",78,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[11,"distinct_u","","",78,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[11,"count","","",78,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[11,"count_u","","",78,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[11,"consolidate","","",78,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"iterate","","",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"collection"}}],[11,"join_map","","",78,{"inputs":[{"name":"self"},{"name":"collection"},{"name":"l"}],"output":{"name":"collection"}}],[11,"semijoin","","",78,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[11,"antijoin","","",78,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[11,"join_map_u","","",78,{"inputs":[{"name":"self"},{"name":"collection"},{"name":"l"}],"output":{"name":"collection"}}],[11,"semijoin_u","","",78,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[11,"antijoin_u","","",78,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[11,"join_core","","",78,{"inputs":[{"name":"self"},{"name":"arranged"},{"name":"l"}],"output":{"name":"collection"}}],[11,"count_total","","",78,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[11,"count_total_u","","",78,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}]],"paths":[[3,"OrdWrapper"],[3,"HashableWrapper"],[3,"UnsignedWrapper"],[8,"Hashable"],[3,"BatchWrapper"],[3,"Arranged"],[8,"Arrange"],[8,"ArrangeByKey"],[8,"ArrangeBySelf"],[3,"TraceWriter"],[3,"TraceAgent"],[8,"Group"],[8,"Distinct"],[8,"Count"],[8,"GroupArranged"],[8,"Consolidate"],[8,"Iterate"],[3,"Variable"],[8,"Join"],[8,"JoinUnsigned"],[8,"JoinCore"],[8,"CountTotal"],[8,"CountTotalCore"],[8,"Lattice"],[3,"CursorList"],[8,"Cursor"],[8,"CursorDebug"],[3,"Description"],[3,"Spine"],[3,"Batcher"],[3,"OrdValBatch"],[3,"OrdKeyBatch"],[3,"OrdValCursor"],[3,"OrdValBuilder"],[3,"OrdKeyCursor"],[3,"OrdKeyBuilder"],[3,"HashValBatch"],[3,"HashKeyBatch"],[3,"HashValCursor"],[3,"HashValBuilder"],[3,"HashKeyCursor"],[3,"HashKeyBuilder"],[3,"OrderedLayer"],[3,"OrderedBuilder"],[3,"OrderedCursor"],[3,"OrderedLeaf"],[3,"OrderedLeafBuilder"],[3,"OrderedLeafCursor"],[3,"HashedLayer"],[3,"HashedBuilder"],[3,"HashedCursor"],[3,"Entry"],[3,"WeightedLayer"],[3,"WeightedBuilder"],[3,"WeightedCursor"],[3,"UnorderedLayer"],[3,"UnorderedBuilder"],[3,"UnorderedCursor"],[8,"Trie"],[8,"Builder"],[8,"MergeBuilder"],[8,"TupleBuilder"],[8,"Cursor"],[3,"TraceEnter"],[3,"BatchEnter"],[3,"CursorEnter"],[3,"TraceBox"],[3,"TraceRc"],[8,"TraceReader"],[8,"Trace"],[8,"BatchReader"],[8,"Batch"],[8,"Batcher"],[8,"Builder"],[8,"Input"],[3,"InputSession"],[3,"DiffPair"],[8,"Diff"],[3,"Collection"],[8,"AsCollection"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","items":[[3,"Options","getopts","A description of the options that a program can handle.",null,null],[3,"Matches","","The result of checking command line arguments. Contains a vector of matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",0,null],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",null,null],[13,"FloatingFrees","","Flags and \"free\" arguments can be freely inter-mixed.",1,null],[13,"StopAtFirstFree","","As soon as a \"free\" argument (i.e. non-flag) is encountered, stop considering any remaining arguments as flags.",1,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",2,null],[13,"No","","The option takes no argument.",2,null],[13,"Maybe","","The option argument is optional.",2,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",3,null],[13,"Optional","","The option occurs at most once.",3,null],[13,"Multi","","The option occurs zero or more times.",3,null],[4,"Fail","","The type returned when the command line does not conform to the expected format. Use the `Debug` implementation to output detailed information.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4,null],[13,"OptionMissing","","A required option is not present.",4,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,null],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",4,null],[4,"FailType","","The type of failure that occurred.",null,null],[13,"ArgumentMissing_","","",5,null],[13,"UnrecognizedOption_","","",5,null],[13,"OptionMissing_","","",5,null],[13,"OptionDuplicated_","","",5,null],[13,"UnexpectedArgument_","","",5,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"new","","Create a blank set of options.",6,{"inputs":[],"output":{"name":"options"}}],[11,"parsing_style","","Set the parsing style.",6,{"inputs":[{"name":"self"},{"name":"parsingstyle"}],"output":{"name":"options"}}],[11,"opt","","Create a generic option group, stating all parameters explicitly.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"hasarg"},{"name":"occur"}],"output":{"name":"options"}}],[11,"optflag","","Create a long option that is optional and does not take an argument.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagmulti","","Create a long option that can occur more than once and does not take an argument.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur multiple times.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optopt","","Create a long option that is optional and takes an argument.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"reqopt","","Create a long option that is required and takes an argument.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"parse","","Parse command line arguments according to the provided options.",6,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"result"}}],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"usage","","Derive a usage message from a set of options.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parsingstyle"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parsingstyle"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"hasarg"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"hasarg"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"occur"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"occur"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"failtype"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"failtype"}],"output":{"name":"bool"}}],[11,"opt_present","","Returns true if an option was matched.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_count","","Returns the number of times an option was matched.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"usize"}}],[11,"opts_present","","Returns true if any of several options were matched.",0,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given option.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[4,"FailType"],[3,"Options"]]};
searchIndex["graph_map"] = {"doc":"","items":[[0,"graph_map","graph_map","",null,null],[3,"GraphMMap","graph_map::graph_map","",null,null],[11,"nodes","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edges","","",0,null],[11,"new","","",0,{"inputs":[{"name":"str"}],"output":{"name":"graphmmap"}}],[0,"typed_map","graph_map","",null,null],[3,"TypedMemoryMap","graph_map::typed_map","",null,null],[11,"new","","",1,{"inputs":[{"name":"string"}],"output":{"name":"typedmemorymap"}}],[11,"index","","",1,null]],"paths":[[3,"GraphMMap"],[3,"TypedMemoryMap"]]};
searchIndex["libc"] = {"doc":"Bindings for the C standard library and other platform libraries","items":[[0,"types","libc","",null,null],[0,"common","libc::types","",null,null],[0,"c95","libc::types::common","",null,null],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","libc::types::common","",null,null],[6,"int8_t","libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","libc::types::common","",null,null],[4,"DIR","libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","libc::types","",null,null],[0,"common","libc::types::os","",null,null],[0,"posix01","libc::types::os::common","",null,null],[3,"glob_t","libc::types::os::common::posix01","",null,null],[12,"gl_pathc","","",0,null],[12,"gl_pathv","","",0,null],[12,"gl_offs","","",0,null],[12,"__unused1","","",0,null],[12,"__unused2","","",0,null],[12,"__unused3","","",0,null],[12,"__unused4","","",0,null],[12,"__unused5","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[4,"timezone","","",null,null],[6,"pthread_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sighandler_t","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[0,"bsd43","libc::types::os::common","",null,null],[3,"rusage","libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[0,"bsd44","libc::types::os::common","",null,null],[3,"sockaddr","libc::types::os::common::bsd44","",null,null],[12,"sa_family","","",5,null],[12,"sa_data","","",5,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",6,null],[12,"__ss_align","","",6,null],[12,"__ss_pad2","","",6,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",7,null],[12,"sin_port","","",7,null],[12,"sin_addr","","",7,null],[12,"sin_zero","","",7,null],[3,"in_addr","","",null,null],[12,"s_addr","","",8,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",9,null],[12,"sin6_port","","",9,null],[12,"sin6_flowinfo","","",9,null],[12,"sin6_addr","","",9,null],[12,"sin6_scope_id","","",9,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",10,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",11,null],[12,"imr_interface","","",11,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",12,null],[12,"ipv6mr_interface","","",12,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",13,null],[12,"ai_family","","",13,null],[12,"ai_socktype","","",13,null],[12,"ai_protocol","","",13,null],[12,"ai_addrlen","","",13,null],[12,"ai_addr","","",13,null],[12,"ai_canonname","","",13,null],[12,"ai_next","","",13,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",15,null],[12,"ifa_name","","",15,null],[12,"ifa_flags","","",15,null],[12,"ifa_addr","","",15,null],[12,"ifa_netmask","","",15,null],[12,"ifa_ifu","","",15,null],[12,"ifa_data","","",15,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[0,"arch","libc::types::os","",null,null],[0,"c95","libc::types::os::arch","",null,null],[6,"c_char","libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","libc::types::os::arch","",null,null],[6,"c_longlong","libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","libc::types::os::arch","",null,null],[6,"off_t","libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","libc::types::os::arch","",null,null],[3,"stat","libc::types::os::arch::posix01","",null,null],[12,"st_dev","","",16,null],[12,"st_ino","","",16,null],[12,"st_nlink","","",16,null],[12,"st_mode","","",16,null],[12,"st_uid","","",16,null],[12,"st_gid","","",16,null],[12,"__pad0","","",16,null],[12,"st_rdev","","",16,null],[12,"st_size","","",16,null],[12,"st_blksize","","",16,null],[12,"st_blocks","","",16,null],[12,"st_atime","","",16,null],[12,"st_atime_nsec","","",16,null],[12,"st_mtime","","",16,null],[12,"st_mtime_nsec","","",16,null],[12,"st_ctime","","",16,null],[12,"st_ctime_nsec","","",16,null],[12,"__unused","","",16,null],[3,"utimbuf","","",null,null],[12,"actime","","",17,null],[12,"modtime","","",17,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",18,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[0,"extra","libc::types::os::arch","",null,null],[3,"sockaddr_ll","libc::types::os::arch::extra","",null,null],[12,"sll_family","","",19,null],[12,"sll_protocol","","",19,null],[12,"sll_ifindex","","",19,null],[12,"sll_hatype","","",19,null],[12,"sll_pkttype","","",19,null],[12,"sll_halen","","",19,null],[12,"sll_addr","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[0,"consts","libc","",null,null],[0,"os","libc::consts","",null,null],[0,"c95","libc::consts::os","",null,null],[17,"EXIT_FAILURE","libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","libc::consts::os","",null,null],[17,"O_RDONLY","libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ERFKILL","","",null,null],[17,"EHWPOISON","","",null,null],[0,"posix01","libc::consts::os","",null,null],[17,"F_DUPFD","libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"posix08","libc::consts::os","",null,null],[17,"O_CLOEXEC","libc::consts::os::posix08","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[0,"bsd44","libc::consts::os","",null,null],[17,"MADV_NORMAL","libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[0,"extra","libc::consts::os","",null,null],[17,"AF_PACKET","libc::consts::os::extra","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"PATH_MAX","","",null,null],[0,"sysconf","libc::consts::os","",null,null],[17,"_SC_ARG_MAX","libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[0,"funcs","libc","",null,null],[0,"c95","libc::funcs","",null,null],[0,"ctype","libc::funcs::c95","",null,null],[5,"isalnum","libc::funcs::c95::ctype","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[0,"stdio","libc::funcs::c95","",null,null],[5,"fopen","libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","libc::funcs::c95","",null,null],[5,"abs","libc::funcs::c95::stdlib","",null,null],[5,"labs","","",null,null],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[0,"string","libc::funcs::c95","",null,null],[5,"strcpy","libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix88","",null,null],[5,"chmod","libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","libc::funcs::posix88","",null,null],[5,"popen","libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","libc::funcs::posix88","",null,null],[5,"open","libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[0,"dirent","libc::funcs::posix88","",null,null],[5,"opendir","libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","libc::funcs::posix88","",null,null],[5,"access","libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"getsid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"usleep","","",null,null],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[0,"signal","libc::funcs::posix88","",null,null],[5,"kill","libc::funcs::posix88::signal","",null,null],[0,"mman","libc::funcs::posix88","",null,null],[5,"mlock","libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","libc::funcs::posix88","",null,null],[5,"if_nametoindex","libc::funcs::posix88::net","",null,null],[0,"posix01","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix01","",null,null],[5,"lstat","libc::funcs::posix01::stat_","",null,null],[0,"unistd","libc::funcs::posix01","",null,null],[5,"readlink","libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,null],[5,"fdatasync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[0,"signal","libc::funcs::posix01","",null,null],[5,"signal","libc::funcs::posix01::signal","",null,null],[0,"glob","libc::funcs::posix01","",null,null],[5,"glob","libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","libc::funcs::posix01","",null,null],[5,"posix_madvise","libc::funcs::posix01::mman","",null,null],[0,"resource","libc::funcs::posix01","",null,null],[5,"getrlimit","libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","libc::funcs","",null,null],[5,"socket","libc::funcs::bsd43","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,null],[0,"bsd44","libc::funcs","",null,null],[5,"getdtablesize","libc::funcs::bsd44","",null,null],[5,"ioctl","","",null,null],[5,"madvise","","",null,null],[5,"mincore","","",null,null],[5,"flock","","",null,null]],"paths":[[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};
searchIndex["mmap"] = {"doc":"","items":[[3,"MemoryMap","mmap","A memory mapped file or chunk of memory. This is a very system-specific interface to the OS's memory mapping facilities (`mmap` on POSIX, `VirtualAlloc`/`CreateFileMapping` on Windows). It makes no attempt at abstracting platform differences, besides in error values returned. Consider yourself warned.",null,null],[4,"MemoryMapKind","","Type of memory map",null,null],[13,"MapFile","","Virtual memory map. Usually used to change the permissions of a given chunk of memory.  Corresponds to `VirtualAlloc` on Windows.",0,null],[13,"MapVirtual","","Virtual memory map. Usually used to change the permissions of a given chunk of memory, or for allocation. Corresponds to `VirtualAlloc` on Windows.",0,null],[4,"MapOption","","Options the memory map is created with",null,null],[13,"MapReadable","","The memory should be readable",1,null],[13,"MapWritable","","The memory should be writable",1,null],[13,"MapExecutable","","The memory should be executable",1,null],[13,"MapAddr","","Create a map for a specific address range. Corresponds to `MAP_FIXED` on POSIX.",1,null],[13,"MapFd","","Create a memory mapping for a file with a given fd.",1,null],[13,"MapOffset","","When using `MapFd`, the start of the map is `usize` bytes from the start of the file.",1,null],[13,"MapNonStandardFlags","","On POSIX, this can be used to specify the default flags passed to `mmap`. By default it uses `MAP_PRIVATE` and, if not using `MapFd`, `MAP_ANON`. This will override both of those. This is platform-specific (the exact values used) and ignored on Windows.",1,null],[4,"MapError","","Possible errors when creating a map.",null,null],[13,"ErrFdNotAvail","","The following are POSIX-specific",2,null],[13,"ErrInvalidFd","","fd was not valid",2,null],[13,"ErrUnaligned","","Either the address given by `MapAddr` or offset given by `MapOffset` was not a multiple of `MemoryMap::granularity` (unaligned to page size).",2,null],[13,"ErrNoMapSupport","","With `MapFd`, the fd does not support mapping.",2,null],[13,"ErrNoMem","","If using `MapAddr`, the address + `min_len` was outside of the process's address space. If using `MapFd`, the target of the fd didn't have enough resources to fulfill the request.",2,null],[13,"ErrZeroLength","","A zero-length map was requested. This is invalid according to POSIX. Not all platforms obey this, but this wrapper does.",2,null],[13,"ErrUnknown","","Unrecognized error. The inner value is the unrecognized errno.",2,null],[13,"ErrUnsupProt","","The following are Windows-specific",2,null],[13,"ErrUnsupOffset","","When using `MapFd`, `MapOffset` was given (Windows does not support this at all)",2,null],[13,"ErrAlreadyExists","","When using `MapFd`, there was already a mapping to the file.",2,null],[13,"ErrVirtualAlloc","","Unrecognized error from `VirtualAlloc`. The inner value is the return value of GetLastError.",2,null],[13,"ErrCreateFileMappingW","","Unrecognized error from `CreateFileMapping`. The inner value is the return value of `GetLastError`.",2,null],[13,"ErrMapViewOfFile","","Unrecognized error from `MapViewOfFile`. The inner value is the return value of `GetLastError`.",2,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"memorymapkind"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"mapoption"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"maperror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Create a new mapping with the given `options`, at least `min_len` bytes long. `min_len` must be greater than zero; see the note on `ErrZeroLength`.",3,null],[11,"granularity","","Granularity that the offset or address must be for `MapOffset` and `MapAddr` respectively.",3,{"inputs":[],"output":{"name":"usize"}}],[11,"drop","","Unmap the mapping. Panics the task if `munmap` panics.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"data","","Returns the pointer to the memory created or modified by this map.",3,null],[11,"len","","Returns the number of bytes this map applies to.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of mapping this represents.",3,{"inputs":[{"name":"self"}],"output":{"name":"memorymapkind"}}]],"paths":[[4,"MemoryMapKind"],[4,"MapOption"],[4,"MapError"],[3,"MemoryMap"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["tempdir"] = {"doc":"Temporary directories of files.","items":[[3,"TempDir","tempdir","A directory in the filesystem that is automatically deleted when it goes out of scope.",null,null],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose name will have the prefix, `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name will have the prefix `prefix`. The directory and everything inside it will be automatically deleted once the returned `TempDir` is destroyed.",0,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"path","","Accesses the [`Path`] to the temporary directory.",0,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","Unwraps the [`Path`] contained in the `TempDir` and returns it. This destroys the `TempDir` without deleting the directory represented by the returned `Path`.",0,{"inputs":[{"name":"self"}],"output":{"name":"pathbuf"}}],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"TempDir"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["timely"] = {"doc":"Timely dataflow is framework for managing and executing data-parallel dataflow computations.","items":[[8,"Push","timely","Pushing elements of type `T`.",null,null],[10,"push","","Pushes `element` and provides the opportunity to take ownership.",0,null],[11,"send","","Pushes `element` and drops any resulting resources.",0,null],[11,"done","","Pushes `None`, conventionally signalling a flush.",0,null],[8,"Pull","","Pulling elements of type `T`.",null,null],[10,"pull","","Pulls an element and provides the opportunity to take ownership.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"recv","","Takes an `Option<T>` and leaves `None` behind.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[4,"Configuration","","Possible configurations for the communication infrastructure.",null,null],[13,"Thread","","Use one thread.",2,null],[13,"Process","","Use one process with an indicated number of threads.",2,null],[13,"Cluster","","Expect multiple processes indicated by `(threads, process, host_list, report)`.",2,null],[0,"progress","","Progress tracking mechanisms to support notification in timely dataflow",null,null],[0,"count_map","timely::progress","A mapping from general types `T` to `i64`, with zero values absent.",null,null],[3,"CountMap","timely::progress::count_map","Represents a map from `T` to `i64` with values mapping to zero removed.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"countmap"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"countmap"}}],[11,"update","","Adds `val` to the value associated with `key`, returning the new value.",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"into_inner","","Extracts the `Vec<(T, i64)>` from the map, consuming it.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"iter","","Iterates over the contents of the map.",3,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clear","","Clears the map.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","The number of non-zero keys in the map.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","True iff all keys have value zero.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pop","","Returns an element of the map, or `None` if it is empty.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Allocates a new empty `CountMap`.",3,{"inputs":[],"output":{"name":"countmap"}}],[11,"new_from","","Allocates a new `CountMap` with a single entry.",3,{"inputs":[{"name":"t"},{"name":"i64"}],"output":{"name":"countmap"}}],[11,"drain_into","","Drains `self` into `other`.",3,{"inputs":[{"name":"self"},{"name":"countmap"}],"output":null}],[11,"extend","","Performs a sequence of updates described by `iterator`.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"frontier","timely::progress","Tracks minimal sets of mutually incomparable elements of a partial order.",null,null],[3,"Antichain","timely::progress::frontier","A set of mutually incomparable elements.",null,null],[3,"MutableAntichain","","An antichain based on a multiset whose elements frequencies can be updated.",null,null],[11,"default","","",4,{"inputs":[],"output":{"name":"antichain"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"antichain"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"insert","","Updates the `Antichain` if the element is not greater than or equal to some present element.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `Antichain`.",4,{"inputs":[],"output":{"name":"antichain"}}],[11,"from_elem","","Creates a new singleton `Antichain`.",4,{"inputs":[{"name":"t"}],"output":{"name":"antichain"}}],[11,"clear","","Clears the contents of the antichain.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"less_than","","Returns true if any item in the antichain is strictly less than the argument.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"less_equal","","Returns true if any item in the antichain is less than or equal to the argument.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"dominates","","Returns true if every element of `other` is greater or equal to some element of `self`.",4,{"inputs":[{"name":"self"},{"name":"antichain"}],"output":{"name":"bool"}}],[11,"elements","","Reveals the elements in the antichain.",4,null],[11,"default","","",5,{"inputs":[],"output":{"name":"mutableantichain"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"mutableantichain"}}],[11,"new","","Creates a new empty `MutableAntichain`.",5,{"inputs":[],"output":{"name":"mutableantichain"}}],[11,"clear","","Removes all elements from the antichain.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"elements","","Reveals the element in the `MutableAntichain`.",5,null],[11,"new_bottom","","Creates a new singleton `MutableAntichain`.",5,{"inputs":[{"name":"t"}],"output":{"name":"mutableantichain"}}],[11,"empty","","Returns true if there are no elements in the `MutableAntichain`.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"less_than","","Returns true if any item in the `MutableAntichain` is strictly less than the argument.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"less_equal","","Returns true if any item in the `MutableAntichain` is less than or equal to the argument.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"count","","Returns the number of times an element exists in the set.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"update_into_cm","","Incorporates `updates` into the antichain, pushing frontier changes into `results`.",5,null],[11,"update_weight","","Performs a single update to the antichain, pushing frontier changes into `results`.",5,null],[11,"update","","Applies a single update to the antichain.",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i64"}],"output":null}],[11,"update_iter_and","","Applies updates to the antichain and applies `action` to each frontier change.",5,null],[11,"test_size","","Tests the size of the antichain against a threshould.",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"}],"output":null}],[11,"update_and","","Applies an update to the antichain and takes an action on any frontier changes.",5,null],[0,"nested","timely::progress","Coordination of progress information between a scope-as-operator and its children operators.",null,null],[0,"pointstamp_counter","timely::progress::nested","Manages pointstamp counts (timestamp, location) within a sub operator.",null,null],[3,"PointstampCounter","timely::progress::nested::pointstamp_counter","Represents changes to pointstamps before and after transmission along a scope's topology.",null,null],[12,"source","","timestamp updates indexed by (scope, output)",6,null],[12,"target","","timestamp updates indexed by (scope, input)",6,null],[12,"pushed","","pushed updates indexed by (scope, input)",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"pointstampcounter"}}],[11,"update_target","","Updates the count for a time at a target.",6,{"inputs":[{"name":"self"},{"name":"target"},{"name":"t"},{"name":"i64"}],"output":null}],[11,"update_source","","Updates the count for a time at a source.",6,{"inputs":[{"name":"self"},{"name":"source"},{"name":"t"},{"name":"i64"}],"output":null}],[11,"clear","","Clears the pointstamp counter.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"allocate_for_operator","","Allocates internal state given an operator's inputs and outputs.",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"summary","timely::progress::nested","Path summaries that are either child local, or leave the scope and re-enter from the parent.",null,null],[4,"Summary","timely::progress::nested::summary","Summarizes a path within a scope.",null,null],[13,"Local","","Reachable within the scope, and a summary adjusting only the inner coordinate.",7,null],[13,"Outer","","Reachable outside the scope, with adjustments to both coordinates.",7,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"summary"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"summary"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"summary"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"summary"}}],[11,"less_equal","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"results_in","","",7,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"option"}}],[11,"followed_by","","",7,{"inputs":[{"name":"self"},{"name":"summary"}],"output":{"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"product","timely::progress::nested","A pair timestamp suitable for use with the product partial order.",null,null],[3,"Product","timely::progress::nested::product","A nested pair of timestamps, one outer and one inner.",null,null],[12,"outer","","Outer timestamp.",8,null],[12,"inner","","Inner timestamp.",8,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"hash","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"product"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"new","","Creates a new product from outer and inner coordinates.",8,{"inputs":[{"name":"touter"},{"name":"tinner"}],"output":{"name":"product"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"less_equal","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"embalm","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"entomb","","",8,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"exhume","","",8,null],[0,"subgraph","timely::progress::nested","Implements `Operate` for a scoped collection of child operators.",null,null],[3,"Source","timely::progress::nested::subgraph","Names a source of a data stream.",null,null],[12,"index","","Index of the source operator.",9,null],[12,"port","","Number of the output port from the operator.",9,null],[3,"Target","","Names a target of a data stream.",null,null],[12,"index","","Index of the target operator.",10,null],[12,"port","","Nmuber of the input port to the operator.",10,null],[3,"Subgraph","","A dataflow subgraph.",null,null],[12,"path","","A sequence of integers uniquely identifying the subgraph.",11,null],[12,"index","","The index assigned to the subgraph by its parent.",11,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"local","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inputs","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"outputs","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_internal_summary","","",11,null],[11,"set_external_summary","","",11,null],[11,"push_external_progress","","",11,null],[11,"pull_internal_progress","","",11,null],[11,"new_input","","Allocates a new input to the subgraph and returns the assigned index.",11,{"inputs":[{"name":"self"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"new_output","","Allocates a new output from the subgraph and returns the assigned index.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"connect","","Introduces a dependence from the source to the target.",11,{"inputs":[{"name":"self"},{"name":"source"},{"name":"target"}],"output":null}],[11,"new_from","","Creates a new Subgraph from a channel allocator and \"descriptive\" indices.",11,{"inputs":[{"name":"a"},{"name":"usize"},{"name":"vec"}],"output":{"name":"subgraph"}}],[11,"allocate_child_id","","Allocates a new child identifier, for later use.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add_child","","Adds a new child to the subgraph.",11,{"inputs":[{"name":"self"},{"name":"box"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"timestamp","timely::progress","A partially ordered measure of progress at each timely dataflow location.",null,null],[3,"RootTimestamp","timely::progress::timestamp","An empty timestamp used by the root scope.",null,null],[3,"RootSummary","","An empty path summary for root timestamps.",null,null],[8,"Timestamp","","A composite trait for types that serve as timestamps in timely dataflow.",null,null],[16,"Summary","","A type summarizing action on a timestamp along a dataflow path.",12,null],[8,"PathSummary","","A summary of how a timestamp advances along a timely dataflow path.",null,null],[10,"results_in","","Advances a timestamp according to the timestamp actions on the path.",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"followed_by","","Composes this path summary with another path summary.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"roottimestamp"}}],[11,"hash","","",14,null],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"roottimestamp"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"roottimestamp"}],"output":{"name":"option"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"roottimestamp"}],"output":{"name":"bool"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"roottimestamp"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"less_equal","","",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new `Product<RootTimestamp,T>`.",14,{"inputs":[{"name":"t"}],"output":{"name":"product"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"rootsummary"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"rootsummary"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"rootsummary"}],"output":{"name":"option"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"rootsummary"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"rootsummary"}}],[11,"results_in","","",15,{"inputs":[{"name":"self"},{"name":"roottimestamp"}],"output":{"name":"option"}}],[11,"followed_by","","",15,{"inputs":[{"name":"self"},{"name":"rootsummary"}],"output":{"name":"option"}}],[11,"less_equal","","",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"operate","timely::progress","Methods which describe an operators topology, and the progress it makes.",null,null],[8,"Operate","timely::progress::operate","Methods for describing an operators topology, and the progress it makes.",null,null],[11,"local","","Indicates if the operator is strictly local to this worker.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"inputs","","The number of inputs.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"outputs","","The number of outputs.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_internal_summary","","Fetches summary information about internal structure of the operator.",16,null],[11,"set_external_summary","","Presents summary information about the external structure around the operator.",16,null],[11,"push_external_progress","","Reports a summary of progress statements external to the operator and its peer group.",16,null],[10,"pull_internal_progress","","Retrieves a summary of progress statements internal to the operator.",16,null],[10,"name","","A descripitive name for the operator",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"notify_me","","Indicates of whether the operator requires `push_external_progress` information or not.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"broadcast","timely::progress","Broadcasts progress information among workers.",null,null],[3,"Progcaster","timely::progress::broadcast","Manages broadcasting of progress updates to and receiving updates from workers.",null,null],[6,"ProgressVec","","A list of progress updates corresponding to `((child_scope, [in/out]_port, timestamp), delta)`",null,null],[11,"new","","Creates a new `Progcaster` using a channel from the supplied allocator.",17,{"inputs":[{"name":"a"}],"output":{"name":"progcaster"}}],[11,"send_and_recv","","Sends and receives progress updates, broadcasting the contents of `messages` and `internal`, and updating each with updates from other workers.",17,{"inputs":[{"name":"self"},{"name":"countmap"},{"name":"countmap"}],"output":null}],[0,"dataflow","timely","Abstractions for timely dataflow programming.",null,null],[0,"operators","timely::dataflow","Extension traits for `Stream` implementing various operators.",null,null],[3,"InputHandle","timely::dataflow::operators","Handle to an operator's input stream.",null,null],[3,"FrontieredInputHandle","","Handle to an operator's input stream and frontier.",null,null],[3,"OutputHandle","","Handle to an operator's output stream.",null,null],[3,"Notificator","","Tracks requests for notification and delivers available notifications.",null,null],[3,"FrontierNotificator","","Tracks requests for notification and delivers available notifications.",null,null],[3,"Capability","","The capability to send data with a certain timestamp on a dataflow edge.",null,null],[3,"CapabilitySet","","A set of capabilities, for possibly incomparable times.",null,null],[0,"enterleave","","Extension traits to move a `Stream` between an outer `Scope` and inner `Scope`.",null,null],[8,"Enter","timely::dataflow::operators::enterleave","Extension trait to move a `Stream` into a child of its current `Scope`.",null,null],[10,"enter","","Moves the `Stream` argument into a child of its current `Scope`.",18,{"inputs":[{"name":"self"},{"name":"child"}],"output":{"name":"stream"}}],[8,"EnterAt","","Extension trait to move a `Stream` into a child of its current `Scope` setting the timestamp for each element.",null,null],[10,"enter_at","","Moves the `Stream` argument into a child of its current `Scope` setting the timestamp for each element by `initial`.",19,{"inputs":[{"name":"self"},{"name":"child"},{"name":"f"}],"output":{"name":"stream"}}],[8,"Leave","","Extension trait to move a `Stream` to the parent of its current `Scope`.",null,null],[10,"leave","","Moves a `Stream` to the parent of its current `Scope`.",20,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[0,"unary","timely::dataflow::operators","Methods to construct generic streaming and blocking unary operators.",null,null],[8,"Unary","timely::dataflow::operators::unary","Methods to construct generic streaming and blocking unary operators.",null,null],[10,"unary_stream","","Creates a new dataflow operator that partitions its input stream by a parallelization strategy `pact`, and repeatedly invokes `logic` which can read from the input stream and write to the output stream.",21,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"l"}],"output":{"name":"stream"}}],[10,"unary_notify","","Creates a new dataflow operator that partitions its input stream by a parallelization strategy `pact`, and repeatedly invokes `logic` which can read from the input stream, write to the output stream, and request and receive notifications. The method also requires a vector of the initial notifications the operator requires (commonly none).",21,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"vec"},{"name":"l"}],"output":{"name":"stream"}}],[0,"input","timely::dataflow::operators","Create new `Streams` connected to external inputs.",null,null],[3,"Handle","timely::dataflow::operators::input","A handle to an input `Stream`, used to introduce data to a timely dataflow computation.",null,null],[8,"Input","","Create a new `Stream` and `Handle` through which to supply input.",null,null],[10,"new_input","","Create a new `Stream` and `Handle` through which to supply input.",22,null],[11,"send","","Sends one record into the corresponding timely dataflow `Stream`, at the current epoch.",23,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"send_batch","","Sends a batch of records into the corresponding timely dataflow `Stream`, at the current epoch.",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"advance_to","","Advances the current epoch to `next`.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"close","","Closes the input.",23,{"inputs":[{"name":"self"}],"output":null}],[11,"epoch","","Reports the current epoch.",23,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"time","","Reports the current timestamp.",23,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"drop","","",23,{"inputs":[{"name":"self"}],"output":null}],[0,"unordered_input","timely::dataflow::operators","Create new `Streams` connected to external inputs.",null,null],[3,"UnorderedHandle","timely::dataflow::operators::unordered_input","A handle to an input `Stream`, used to introduce data to a timely dataflow computation.",null,null],[8,"UnorderedInput","","Create a new `Stream` and `Handle` through which to supply input.",null,null],[10,"new_unordered_input","","Create a new capability-based `Stream` and `Handle` through which to supply input. This input supports multiple open epochs (timestamps) at the same time.",24,null],[11,"session","","Allocates a new automatically flushing session based on the supplied capability.",25,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"autoflushsession"}}],[11,"drop","","",25,{"inputs":[{"name":"self"}],"output":null}],[0,"feedback","timely::dataflow::operators","Create cycles in a timely dataflow graph.",null,null],[3,"Handle","timely::dataflow::operators::feedback","A handle used to bind the source of a loop variable.",null,null],[8,"LoopVariable","","Creates a `Stream` and a `Handle` to later bind the source of that `Stream`.",null,null],[10,"loop_variable","","Creates a `Stream` and a `Handle` to later bind the source of that `Stream`.",26,null],[8,"ConnectLoop","","Connect a `Stream` to the input of a loop variable.",null,null],[10,"connect_loop","","Connect a `Stream` to be the input of a loop variable.",27,{"inputs":[{"name":"self"},{"name":"handle"}],"output":null}],[0,"concat","timely::dataflow::operators","Merges the contents of multiple streams.",null,null],[8,"Concat","timely::dataflow::operators::concat","Merge the contents of two streams.",null,null],[10,"concat","","Merge the contents of two streams.",28,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"name":"stream"}}],[8,"Concatenate","","Merge the contents of multiple streams.",null,null],[10,"concatenate","","Merge the contents of multiple streams.",29,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"stream"}}],[0,"partition","timely::dataflow::operators","Partition a stream of records into multiple streams.",null,null],[8,"Partition","timely::dataflow::operators::partition","Partition a stream of records into multiple streams.",null,null],[10,"partition","","Produces `parts` output streams, containing records produced and assigned by `route`.",30,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"f"}],"output":{"name":"vec"}}],[0,"map","timely::dataflow::operators","Extension methods for `Stream` based on record-by-record transformation.",null,null],[8,"Map","timely::dataflow::operators::map","Extension trait for `Stream`.",null,null],[10,"map","","Consumes each element of the stream and yields a new element.",31,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[10,"map_in_place","","Updates each element of the stream and yields the element, re-using memory where possible.",31,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[10,"flat_map","","Consumes each element of the stream and yields some number of new elements.",31,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[0,"inspect","timely::dataflow::operators","Extension trait and implementation for observing and action on streamed data.",null,null],[8,"Inspect","timely::dataflow::operators::inspect","Methods to inspect records and batches of records on a stream.",null,null],[10,"inspect","","Runs a supplied closure on each observed data element.",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"inspect_batch","","Runs a supplied closure on each observed data batch (time and data slice).",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"filter","timely::dataflow::operators","Filters a stream by a predicate.",null,null],[8,"Filter","timely::dataflow::operators::filter","Extension trait for filtering.",null,null],[10,"filter","","Returns a new instance of `self` containing only records satisfying `predicate`.",33,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[0,"binary","timely::dataflow::operators","Methods to construct generic streaming and blocking binary operators.",null,null],[8,"Binary","timely::dataflow::operators::binary","Methods to construct generic streaming and blocking binary operators.",null,null],[10,"binary_stream","","Creates a new dataflow operator that partitions each of its input stream by a parallelization strategy `pact`, and repeatedly invokes `logic` which can read from the input streams and write to the output stream.",34,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"l"}],"output":{"name":"stream"}}],[10,"binary_notify","","Creates a new dataflow operator that partitions its input stream by a parallelization strategy `pact`, and repeatedly invokes `logic` which can read from the input streams, write to the output stream, and request and receive notifications. The method also requires a vector of the initial notifications the operator requires (commonly none).",34,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"vec"},{"name":"l"}],"output":{"name":"stream"}}],[0,"delay","timely::dataflow::operators","Operators acting on timestamps to logically delay records",null,null],[8,"Delay","timely::dataflow::operators::delay","Methods to advance the timestamps of records or batches of records.",null,null],[10,"delay","","Advances the timestamp of records using a supplied function.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"delay_batch","","Advances the timestamp of batches of records using a supplied function.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"exchange","timely::dataflow::operators","Exchange records between workers.",null,null],[8,"Exchange","timely::dataflow::operators::exchange","Exchange records between workers.",null,null],[10,"exchange","","Exchange records so that all records with the same `route` are at the same worker.",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"exchange_ts","","Exchange records by time so that all records whose time and data evaluate to the same `route` are at the same worker.",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"broadcast","timely::dataflow::operators","Broadcast records to all workers.",null,null],[8,"Broadcast","timely::dataflow::operators::broadcast","Broadcast records to all workers.",null,null],[10,"broadcast","","Broadcast records to all workers.",37,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"probe","timely::dataflow::operators","Monitor progress at a `Stream`.",null,null],[3,"Handle","timely::dataflow::operators::probe","Reports information about progress at the probe.",null,null],[8,"Probe","","Monitors progress at a `Stream`.",null,null],[10,"probe","","Constructs a progress probe which indicates which timestamps have elapsed at the operator.",38,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[10,"probe_with","","Inserts a progress probe in a stream.",38,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"stream"}}],[11,"less_than","","returns true iff the frontier is strictly less than `time`.",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"less_equal","","returns true iff the frontier is less than or equal to `time`.",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"done","","returns true iff the frontier is empty.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Allocates a new handle.",39,{"inputs":[],"output":{"name":"self"}}],[11,"with_frontier","","Invokes a method on the frontier, returning its result.",39,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"to_stream","timely::dataflow::operators","Conversion to the `Stream` type from iterators.",null,null],[8,"ToStream","timely::dataflow::operators::to_stream","Converts to a timely `Stream`.",null,null],[10,"to_stream","","Converts to a timely `Stream`.",40,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"stream"}}],[0,"capture","timely::dataflow::operators","Operators which capture and replay streams of records.",null,null],[3,"EventLink","timely::dataflow::operators::capture","A linked list of Event<T, D>.",null,null],[12,"event","","An event.",41,null],[12,"next","","The next event, if it exists.",41,null],[3,"EventWriter","","A wrapper for `W: Write` implementing `EventPusher<T, D>`.",null,null],[3,"EventReader","","A Wrapper for `R: Read` implementing `EventIterator<T, D>`.",null,null],[4,"Event","","Data and progres events of the captured stream.",null,null],[13,"Start","","An initial marker, used only to start the linked list implementation.",42,null],[13,"Progress","","Progress received via `push_external_progress`.",42,null],[13,"Messages","","Messages received via the data stream.",42,null],[8,"Capture","","Capture a stream of timestamped data for later replay.",null,null],[10,"capture_into","","Captures a stream of timestamped data for later replay.",43,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"capture","","Captures a stream using Rust's MPSC channels.",43,{"inputs":[{"name":"self"}],"output":{"name":"receiver"}}],[8,"Extract","","Supports extracting a sequence of timestamp and data.",null,null],[10,"extract","","Converts `self` into a sequence of timestamped data.",44,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[8,"EventIterator","","Iterates over contained `Event<T, D>`.",null,null],[10,"next","","Iterates over references to `Event<T, D>` elements.",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"EventPusher","","Receives `Event<T, D>` events.",null,null],[10,"push","","Provides a new `Event<T, D>` to the pusher.",46,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[8,"Replay","","Replay a capture stream into a scope with the same timestamp.",null,null],[10,"replay_into","","Replays `self` into the provided scope, as a `Stream<S, D>`.",47,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"stream"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"embalm","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"entomb","","",42,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"exhume","","",42,null],[11,"new","","Allocates a new `EventLink`.",41,{"inputs":[],"output":{"name":"eventlink"}}],[11,"new","","Allocates a new `EventWriter` wrapping a supplied writer.",48,{"inputs":[{"name":"w"}],"output":{"name":"eventwriter"}}],[11,"push","","",48,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[11,"new","","Allocates a new `EventReader` wrapping a supplied reader.",49,{"inputs":[{"name":"r"}],"output":{"name":"eventreader"}}],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"operator","timely::dataflow::operators","Methods to construct generic streaming and blocking unary operators.",null,null],[5,"source","timely::dataflow::operators::operator","Creates a new data stream source for a scope.",null,{"inputs":[{"name":"g"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[8,"Operator","","Methods to construct generic streaming and blocking operators.",null,null],[10,"unary_frontier","","Creates a new dataflow operator that partitions its input stream by a parallelization strategy `pact`, and repeteadly invokes `logic`, the function returned by the function passed as `constructor`. `logic` can read from the input stream, write to the output stream, and inspect the frontier at the input.",50,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[10,"unary","","Creates a new dataflow operator that partitions its input stream by a parallelization strategy `pact`, and repeteadly invokes `logic`, the function returned by the function passed as `constructor`. `logic` can read from the input stream, and write to the output stream.",50,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[10,"binary_frontier","","Creates a new dataflow operator that partitions its input streams by a parallelization strategy `pact`, and repeteadly invokes `logic`, the function returned by the function passed as `constructor`. `logic` can read from the input streams, write to the output stream, and inspect the frontier at the inputs.",50,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[10,"binary","","Creates a new dataflow operator that partitions its input streams by a parallelization strategy `pact`, and repeteadly invokes `logic`, the function returned by the function passed as `constructor`. `logic` can read from the input streams, write to the output stream, and inspect the frontier at the inputs.",50,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[0,"aggregation","timely::dataflow::operators","Aggregation operators of various flavors",null,null],[0,"state_machine","timely::dataflow::operators::aggregation","General purpose state transition operator.",null,null],[8,"StateMachine","timely::dataflow::operators::aggregation::state_machine","Generic state-transition machinery: each key has a state, and receives a sequence of events. Events are applied in time-order, but no other promises are made. Each state transition can produce output, which is sent. ",null,null],[10,"state_machine","","Tracks a state for each presented key, using user-supplied state transition logic.",51,{"inputs":[{"name":"self"},{"name":"f"},{"name":"h"}],"output":{"name":"stream"}}],[0,"aggregate","timely::dataflow::operators::aggregation","General purpose intra-timestamp aggregation",null,null],[8,"Aggregate","timely::dataflow::operators::aggregation::aggregate","Generic intra-timestamp aggregation",null,null],[10,"aggregate","","Aggregates data of the form `(key, val)`, using user-supplied logic.",52,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"},{"name":"h"}],"output":{"name":"stream"}}],[0,"reclock","timely::dataflow::operators","Extension methods for `Stream` based on record-by-record transformation.",null,null],[8,"Reclock","timely::dataflow::operators::reclock","Extension trait for reclocking a stream.",null,null],[10,"reclock","","Delays records until an input is observed on the `clock` input.",53,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"name":"stream"}}],[0,"count","timely::dataflow::operators","Counts the number of records at each time.",null,null],[8,"Accumulate","timely::dataflow::operators::count","Accumulates records within a timestamp.",null,null],[10,"accumulate","","Accumulates records within a timestamp.",54,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":{"name":"stream"}}],[11,"count","","Counts the number of records observed at each time.",54,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"next","timely::dataflow::operators","Reads the next input buffer (at some timestamp `t`) and a corresponding capability for `t`. The timestamp `t` of the input buffer can be retrieved by invoking `.time()` on the capability. Returns `None` when there's no more data available.",55,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"for_each","","Repeatedly calls `logic` till exhaustion of the available input data. `logic` receives a capability and an input buffer.",55,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"next","","Reads the next input buffer (at some timestamp `t`) and a corresponding capability for `t`. The timestamp `t` of the input buffer can be retrieved by invoking `.time()` on the capability. Returns `None` when there's no more data available.",56,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"for_each","","Repeatedly calls `logic` till exhaustion of the available input data. `logic` receives a capability and an input buffer.",56,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"frontier","","Inspect the frontier associated with this input.",56,{"inputs":[{"name":"self"}],"output":{"name":"mutableantichain"}}],[11,"session","","Obtains a session that can send data at the timestamp associated with capability `cap`.",57,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"session"}}],[11,"new","","Allocates a new `Notificator`.",58,{"inputs":[],"output":{"name":"notificator"}}],[11,"update_frontier_from_cm","","Updates the `Notificator`'s frontiers from a `CountMap` per input.",58,null],[11,"frontier","","Reveals the elements in the frontier of the indicated input.",58,null],[11,"notify_at","","Requests a notification at the time associated with capability `cap`. Takes ownership of the capability.",58,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"for_each","","Repeatedly calls `logic` till exhaustion of the available notifications.",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"next","","Retrieve the next available notification.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Allocates a new `Notificator`.",59,{"inputs":[],"output":{"name":"frontiernotificator"}}],[11,"notify_at","","Requests a notification at the time associated with capability `cap`. Takes ownership of the capability.",59,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"iter","","Iterate over the notifications made available by inspecting the frontiers.",59,null],[11,"for_each","","Repeatedly calls `logic` till exhaustion of the notifications made available by inspecting the frontiers.",59,null],[11,"time","","The timestamp associated with this capability.",60,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"delayed","","Makes a new capability for a timestamp `new_time` greater or equal to the timestamp of the source capability (`self`).",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"capability"}}],[11,"downgrade","","Downgrades the capability to one corresponding to `new_time`.",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"drop","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"less_equal","","",60,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Allocates an empty capability set.",61,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","Inserts `capability` into the set, discarding redundant capabilities.",61,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"delayed","","Creates a new capability to send data at `time`.",61,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"capability"}}],[11,"downgrade","","Downgrades the set of capabilities to correspond with the times in `frontier`.",61,null],[0,"channels","timely::dataflow","Structured communication between timely dataflow operators.",null,null],[0,"pushers","timely::dataflow::channels","A collection of types that may be pushed at.",null,null],[0,"tee","timely::dataflow::channels::pushers","A `Push` implementor with a list of `Box<Push>` to forward pushes to.",null,null],[3,"Tee","timely::dataflow::channels::pushers::tee","Wraps a shared list of `Box<Push>` to forward pushes to. Owned by `Stream`.",null,null],[3,"TeeHelper","","A shared list of `Box<Push>` used to add `Push` implementors.",null,null],[11,"push","","",62,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"new","","Allocates a new pair of `Tee` and `TeeHelper`.",62,null],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"tee"}}],[11,"add_pusher","","Adds a new `Push` implementor to the list of recipients shared with a `Stream`.",63,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"teehelper"}}],[0,"exchange","timely::dataflow::channels::pushers","The exchange pattern distributes pushed data between many target pushees.",null,null],[3,"Exchange","timely::dataflow::channels::pushers::exchange","Distributes records among target pushees according to a distribution function.",null,null],[11,"new","","Allocates a new `Exchange` from a supplied set of pushers and a distribution function.",64,{"inputs":[{"name":"vec"},{"name":"h"}],"output":{"name":"exchange"}}],[11,"push","","",64,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[0,"counter","timely::dataflow::channels::pushers","A wrapper which counts the number of records pushed past and updates a shared count map.",null,null],[3,"Counter","timely::dataflow::channels::pushers::counter","A wrapper which updates shared `counts` based on the number of records pushed.",null,null],[11,"push","","",65,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"new","","Allocates a new `Counter` from a pushee and shared counts.",65,{"inputs":[{"name":"p"},{"name":"rc"}],"output":{"name":"counter"}}],[11,"pull_progress","","Extracts shared counts into `updates`.",65,{"inputs":[{"name":"self"},{"name":"countmap"}],"output":null}],[0,"buffer","timely::dataflow::channels::pushers","Buffering and session mechanisms to provide the appearance of record-at-a-time sending, with the performance of batched sends.",null,null],[3,"Buffer","timely::dataflow::channels::pushers::buffer","Buffers data sent at the same time, for efficient communication.",null,null],[3,"Session","","An output session for sending records at a specified time.",null,null],[3,"AutoflushSession","","A session which will flush itself when dropped.",null,null],[11,"new","","Creates a new `Buffer`.",66,{"inputs":[{"name":"p"}],"output":{"name":"buffer"}}],[11,"session","","Returns a `Session`, which accepts data to send at the associated time",66,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"session"}}],[11,"autoflush_session","","Allocates a new `AutoflushSession` which flushes itself on drop.",66,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"autoflushsession"}}],[11,"inner","","Returns a reference to the inner `P: Push` type.",66,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cease","","Flushes all data and pushes a `None` to `self.pusher`, indicating a flush.",66,{"inputs":[{"name":"self"}],"output":null}],[11,"give","","Provides one record at the time specified by the `Session`.",67,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"give_iterator","","Provides an iterator of records at the time specified by the `Session`.",67,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"give_content","","Provides a fully formed `Content<D>` message for senders which can use this type.",67,{"inputs":[{"name":"self"},{"name":"content"}],"output":null}],[11,"give","","Transmits a single record.",68,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"give_iterator","","Transmits records produced by an iterator.",68,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"give_content","","Transmits a pre-packed batch of data.",68,{"inputs":[{"name":"self"},{"name":"content"}],"output":null}],[11,"drop","","",68,{"inputs":[{"name":"self"}],"output":null}],[0,"pullers","timely::dataflow::channels","A collection of types that may be pulled from.",null,null],[0,"counter","timely::dataflow::channels::pullers","A wrapper which accounts records pulled past in a shared count map.",null,null],[3,"Counter","timely::dataflow::channels::pullers::counter","A wrapper which accounts records pulled past in a shared count map.",null,null],[11,"next","","Retrieves the next timestamp and batch of data.",69,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Allocates a new `Counter` from a boxed puller.",69,{"inputs":[{"name":"box"}],"output":{"name":"counter"}}],[11,"pull_progress","","Extracts progress information into `consumed`.",69,{"inputs":[{"name":"self"},{"name":"countmap"}],"output":null}],[0,"message","timely::dataflow::channels","Types relating to batching of timestamped records. Core type for communicating a collection of `D: Data` records.",null,null],[3,"Message","timely::dataflow::channels::message","A serializable representation of timestamped data.",null,null],[12,"time","","The timestamp associated with the message.",70,null],[12,"data","","The data in the message.",70,null],[12,"from","","The source worker.",70,null],[12,"seq","","A sequence number for this worker-to-worker stream.",70,null],[4,"Content","","A batch of data, represented either as serialized bytes or typed Rust objects.",null,null],[13,"Bytes","","A serialized representation of data.",71,null],[13,"Typed","","Typed data, which may be efficiently mutated or claimed for ownership.",71,null],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"new","","Allocates a new message from a time, content, source worker id, and sequence number.",70,{"inputs":[{"name":"t"},{"name":"content"},{"name":"usize"},{"name":"usize"}],"output":{"name":"message"}}],[11,"into_bytes","","",70,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"from_bytes","","",70,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"content"}}],[11,"take","","Gives ownership of the content, leaving an empty vector behind.",71,{"inputs":[{"name":"self"}],"output":{"name":"content"}}],[11,"default_length","","Default number of elements in a typed allocated message. This could vary as a function of `std::mem::size_of::<D>()`, so is left as a method rather than a constant.",71,{"inputs":[],"output":{"name":"usize"}}],[11,"len","","The length of the underlying typed vector.",71,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_typed","","Constructs a `Message` from typed data, replacing its argument with `Vec::new()`.",71,{"inputs":[{"name":"vec"}],"output":{"name":"content"}}],[11,"into_typed","","Returns the typed vector, cleared, or a Vec::new() if the data are binary (and drops them on the floor, I guess! Ouch. ALLOC : dropping of binary data. likely called only by persons who pushed typed data on, ALLOC : so perhaps not all that common. Could put a panic! here just for fun! :D ALLOC : casual dropping of contents of `data`, which might have allocated memory.",71,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"push_at","","Pushes `buffer` into `pusher`, ensuring that `buffer` remains valid once returned.",71,{"inputs":[{"name":"vec"},{"name":"t"},{"name":"p"}],"output":null}],[11,"replace_with","","Swaps the contents with another vector.",71,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"deref","","",71,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",71,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"pact","timely::dataflow::channels","Parallelization contracts, describing how data must be exchanged between operators. Parallelization contracts, describing requirements for data movement along dataflow edges.",null,null],[3,"Pipeline","timely::dataflow::channels::pact","A direct connection",null,null],[3,"Exchange","","An exchange between multiple observers by data",null,null],[3,"TimeExchange","","An exchange between multiple observers by time and data",null,null],[3,"Pusher","","Wraps a `Message<T,D>` pusher to provide a `Push<(T, Content<D>)>`.",null,null],[3,"Puller","","Wraps a `Message<T,D>` puller to provide a `Pull<(T, Content<D>)>`.",null,null],[8,"ParallelizationContract","","A ParallelizationContract transforms the output of a Allocate to an (Observer, Pullable).",null,null],[10,"connect","","Alloctes a matched pair of push and pull endpoints implementing the pact.",72,null],[11,"connect","","",73,null],[11,"new","","Allocates a new `Exchange` pact from a distribution function.",74,{"inputs":[{"name":"f"}],"output":{"name":"exchange"}}],[11,"connect","","",74,null],[11,"new","","Allocates a new `TimeExchange` pact from a distribution function.",75,{"inputs":[{"name":"f"}],"output":{"name":"timeexchange"}}],[11,"connect","","",75,null],[11,"new","","Allocates a new pusher.",76,{"inputs":[{"name":"box"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"pusher"}}],[11,"push","","",76,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"new","","Allocates a new `Puller`.",77,{"inputs":[{"name":"box"},{"name":"usize"},{"name":"usize"}],"output":{"name":"puller"}}],[11,"pull","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"scopes","timely::dataflow","Hierarchical organization of timely dataflow graphs.",null,null],[0,"root","timely::dataflow::scopes","The root scope of all timely dataflow computations.",null,null],[3,"Root","timely::dataflow::scopes::root","A `Root` is the entry point to a timely dataflow computation. It wraps a `Allocate`, and has a list of child `Operate`s.",null,null],[11,"new","","Allocates a new `Root` bound to a channel allocator.",78,{"inputs":[{"name":"a"}],"output":{"name":"root"}}],[11,"step","","Performs one step of the computation.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"step_while","","Calls `self.step()` as long as `func` evaluates to true.",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"index","","The index of the worker out of its peers.",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","The total number of peer workers.",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"dataflow","","Construct a new dataflow.",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"dataflow_using","","Construct a new dataflow binding resources that are released only after the dataflow is dropped.",78,{"inputs":[{"name":"self"},{"name":"v"},{"name":"f"}],"output":{"name":"r"}}],[11,"new_identifier","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"index","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","",78,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"child","timely::dataflow::scopes","A child dataflow scope, used to build nested dataflow scopes.",null,null],[3,"Child","timely::dataflow::scopes::child","A `Child` wraps a `Subgraph` and a parent `G: Scope`. It manages the addition of `Operate`s to a subgraph, and the connection of edges between them.",null,null],[12,"subgraph","","The subgraph under assembly.",79,null],[12,"parent","","A copy of the child's parent scope.",79,null],[11,"index","","This worker's unique identifier.",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","The total number of workers in the computation.",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_identifier","","",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",79,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"addr","","",79,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"add_edge","","",79,{"inputs":[{"name":"self"},{"name":"source"},{"name":"target"}],"output":null}],[11,"add_operator_with_index","","",79,{"inputs":[{"name":"self"},{"name":"sc"},{"name":"usize"}],"output":null}],[11,"add_operator","","",79,{"inputs":[{"name":"self"},{"name":"sc"}],"output":{"name":"usize"}}],[11,"new_subscope","","",79,{"inputs":[{"name":"self"}],"output":{"name":"subgraph"}}],[11,"index","","",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","",79,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","",79,null],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"ScopeParent","timely::dataflow::scopes","The information a child scope needs from its parent.",null,null],[16,"Timestamp","","The timestamp associated with data in this scope.",80,null],[10,"new_identifier","","Allocates a new locally unique identifier.",80,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"Scope","","The fundamental operations required to add and connect operators in a timely dataflow graph.",null,null],[10,"name","","A useful name describing the scope.",81,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"addr","","A sequence of scope identifiers describing the path from the `Root` to this scope.",81,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"add_edge","","Connects a source of data with a target of the data. This only links the two for the purposes of tracking progress, rather than effect any data movement itself.",81,{"inputs":[{"name":"self"},{"name":"source"},{"name":"target"}],"output":null}],[10,"add_operator","","Adds a child `Operate` to the builder's scope. Returns the new child's index.",81,{"inputs":[{"name":"self"},{"name":"sc"}],"output":{"name":"usize"}}],[10,"add_operator_with_index","","Adds a child `Operate` to the builder's scope using a supplied index.",81,{"inputs":[{"name":"self"},{"name":"sc"},{"name":"usize"}],"output":null}],[10,"new_subscope","","Creates a new `Subgraph` with timestamp `T`. Used by `scoped`, but unlikely to be commonly useful to end users.",81,{"inputs":[{"name":"self"}],"output":{"name":"subgraph"}}],[11,"scoped","","Creates a `Subgraph` from a closure acting on a `Child` scope, and returning whatever the closure returns.",81,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[0,"stream","timely::dataflow","A handle to a typed stream of timely data.",null,null],[3,"Stream","timely::dataflow::stream","Abstraction of a stream of `D: Data` records timestamped with `S::Timestamp`.",null,null],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"connect_to","","Connects the stream to a destination.",82,{"inputs":[{"name":"self"},{"name":"target"},{"name":"p"},{"name":"usize"}],"output":null}],[11,"new","","Allocates a `Stream` from a supplied `Source` name and rendezvous point.",82,{"inputs":[{"name":"source"},{"name":"teehelper"},{"name":"s"}],"output":{"name":"self"}}],[11,"name","","The name of the stream's source operator.",82,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"scope","","The scope immediately containing the stream.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[0,"execute","timely","Starts a timely dataflow execution from configuration information and per-worker logic.",null,null],[5,"example","timely::execute","Executes a single-threaded timely dataflow computation.",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[5,"execute","","Executes a timely dataflow from a configuration and per-communicator logic.",null,{"inputs":[{"name":"configuration"},{"name":"f"}],"output":{"name":"result"}}],[5,"execute_from_args","","Executes a timely dataflow from supplied arguments and per-communicator logic.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"result"}}],[0,"order","timely","Traits and types for partially ordered sets.",null,null],[8,"PartialOrder","timely::order","A type that is partially ordered.",null,null],[11,"less_than","","Returns true iff one element is strictly less than the other.",83,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"less_equal","","Returns true iff one element is less than or equal to the other.",83,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"logging","timely","Traits, implementations, and macros related to logging timely events.",null,null],[3,"EventStreamLogger","timely::logging","Logs events to an underlying writer.",null,null],[3,"OperatesEvent","","The creation of an `Operate` implementor.",null,null],[12,"id","","Worker-unique identifier for the operator.",84,null],[12,"addr","","Sequence of nested scope identifiers indicating the path from the root to this instance.",84,null],[12,"name","","A helpful name.",84,null],[3,"ChannelsEvent","","The creation of a channel between operators.",null,null],[12,"id","","Worker-unique identifier for the channel",85,null],[12,"scope_addr","","Sequence of nested scope identifiers indicating the path from the root to this instance.",85,null],[12,"source","","Source descriptor, indicating operator index and output port.",85,null],[12,"target","","Target descriptor, indicating operator index and input port.",85,null],[3,"ProgressEvent","","Send or receive of progress information.",null,null],[12,"is_send","","`true` if the event is a send, and `false` if it is a receive.",86,null],[12,"addr","","Sequence of nested scope identifiers indicating the path from the root to this instance.",86,null],[12,"messages","","List of message updates, containing Target descriptor, timestamp as string, and delta.",86,null],[12,"internal","","List of capability updates, containing Source descriptor, timestamp as string, and delta.",86,null],[3,"MessagesEvent","","Message send or receive event",null,null],[12,"is_send","","`true` if send event, `false` if receive event.",87,null],[12,"channel","","Channel identifier",87,null],[12,"source","","Source worker index.",87,null],[12,"target","","Target worker index.",87,null],[12,"seq_no","","Message sequence number.",87,null],[12,"length","","Number of typed records in the message.",87,null],[3,"ScheduleEvent","","Operator start or stop.",null,null],[12,"id","","Worker-unique identifier for the operator, linkable to the identifiers in `OperatesEvent`.",88,null],[12,"start_stop","","`Start` if the operator is starting, `Stop` if it is stopping. activiy is true if it looks like some useful work was performed during this call (data was read or written, notifications were requested / delivered)",88,null],[4,"StartStop","","Records the starting and stopping of an operator.",null,null],[13,"Start","","Operator starts.",89,null],[13,"Stop","","Operator stops; did it have any activity?",89,null],[12,"activity","timely::logging::StartStop","Did the operator perform non-trivial work.",89,null],[5,"log","timely::logging","Logs `record` in `logger` if logging is enabled.",null,null],[5,"initialize","","Initializes logging; called as part of `Root` initialization.",null,{"inputs":[{"name":"root"}],"output":null}],[5,"flush_logs","","Flushes logs; called by `Root::step`.",null,{"inputs":[],"output":null}],[7,"OPERATES","","Logs operator creation.",null,null],[7,"CHANNELS","","Logs channel creation.",null,null],[7,"PROGRESS","","Logs progress transmission.",null,null],[7,"MESSAGES","","Logs message transmission.",null,null],[7,"SCHEDULE","","Logs operator scheduling.",null,null],[7,"GUARDED_MESSAGE","","Logs delivery of message to an operator input.",null,null],[7,"GUARDED_PROGRESS","","Logs delivery of notification to an operator.",null,null],[8,"Logger","","Logging methods",null,null],[16,"Record","","The type of loggable record.",90,null],[10,"log","","Adds `record` to the log.",90,null],[10,"flush","","Called with some frequency; behavior unspecified.",90,{"inputs":[{"name":"self"}],"output":null}],[11,"log","","",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"flush","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"operatesevent"}}],[11,"entomb","","",84,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"embalm","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"exhume","","",84,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"channelsevent"}}],[11,"entomb","","",85,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"embalm","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"exhume","","",85,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"progressevent"}}],[11,"entomb","","",86,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"embalm","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"exhume","","",86,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"messagesevent"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"startstop"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"startstop"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"startstop"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"scheduleevent"}}],[11,"entomb","","",88,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"embalm","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"exhume","","",88,null],[8,"Data","timely","A composite trait for types usable as data in timely dataflow.",null,null],[8,"ExchangeData","","A composite trait for types usable on exchange channels in timely dataflow.",null,null],[11,"from_args","","Constructs a new configuration by parsing supplied text arguments.",2,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"enter","timely::dataflow::stream","",82,{"inputs":[{"name":"self"},{"name":"child"}],"output":{"name":"stream"}}],[11,"leave","","",82,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"unary_notify","","",82,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"vec"},{"name":"l"}],"output":{"name":"stream"}}],[11,"unary_stream","","",82,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"l"}],"output":{"name":"stream"}}],[11,"new_input","timely::dataflow::scopes::child","",79,null],[11,"loop_variable","","",79,null],[11,"connect_loop","timely::dataflow::stream","",82,{"inputs":[{"name":"self"},{"name":"handle"}],"output":null}],[11,"concat","","",82,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"name":"stream"}}],[11,"partition","","",82,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"f"}],"output":{"name":"vec"}}],[11,"map","","",82,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[11,"map_in_place","","",82,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[11,"flat_map","","",82,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[11,"inspect","","",82,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"stream"}}],[11,"inspect_batch","","",82,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"stream"}}],[11,"filter","","",82,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[11,"binary_stream","","",82,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"l"}],"output":{"name":"stream"}}],[11,"binary_notify","","",82,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"vec"},{"name":"l"}],"output":{"name":"stream"}}],[11,"delay","","",82,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"stream"}}],[11,"delay_batch","","",82,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"stream"}}],[11,"exchange","","",82,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"stream"}}],[11,"exchange_ts","","",82,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"stream"}}],[11,"broadcast","","",82,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"probe","","",82,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"probe_with","","",82,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"stream"}}],[11,"capture_into","","",82,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"unary_frontier","","",82,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[11,"unary","","",82,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[11,"binary","","",82,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[11,"binary_frontier","","",82,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[11,"state_machine","","",82,{"inputs":[{"name":"self"},{"name":"f"},{"name":"h"}],"output":{"name":"stream"}}],[11,"aggregate","","",82,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"},{"name":"h"}],"output":{"name":"stream"}}],[11,"reclock","","",82,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"name":"stream"}}],[11,"accumulate","","",82,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":{"name":"stream"}}]],"paths":[[8,"Push"],[8,"Pull"],[4,"Configuration"],[3,"CountMap"],[3,"Antichain"],[3,"MutableAntichain"],[3,"PointstampCounter"],[4,"Summary"],[3,"Product"],[3,"Source"],[3,"Target"],[3,"Subgraph"],[8,"Timestamp"],[8,"PathSummary"],[3,"RootTimestamp"],[3,"RootSummary"],[8,"Operate"],[3,"Progcaster"],[8,"Enter"],[8,"EnterAt"],[8,"Leave"],[8,"Unary"],[8,"Input"],[3,"Handle"],[8,"UnorderedInput"],[3,"UnorderedHandle"],[8,"LoopVariable"],[8,"ConnectLoop"],[8,"Concat"],[8,"Concatenate"],[8,"Partition"],[8,"Map"],[8,"Inspect"],[8,"Filter"],[8,"Binary"],[8,"Delay"],[8,"Exchange"],[8,"Broadcast"],[8,"Probe"],[3,"Handle"],[8,"ToStream"],[3,"EventLink"],[4,"Event"],[8,"Capture"],[8,"Extract"],[8,"EventIterator"],[8,"EventPusher"],[8,"Replay"],[3,"EventWriter"],[3,"EventReader"],[8,"Operator"],[8,"StateMachine"],[8,"Aggregate"],[8,"Reclock"],[8,"Accumulate"],[3,"InputHandle"],[3,"FrontieredInputHandle"],[3,"OutputHandle"],[3,"Notificator"],[3,"FrontierNotificator"],[3,"Capability"],[3,"CapabilitySet"],[3,"Tee"],[3,"TeeHelper"],[3,"Exchange"],[3,"Counter"],[3,"Buffer"],[3,"Session"],[3,"AutoflushSession"],[3,"Counter"],[3,"Message"],[4,"Content"],[8,"ParallelizationContract"],[3,"Pipeline"],[3,"Exchange"],[3,"TimeExchange"],[3,"Pusher"],[3,"Puller"],[3,"Root"],[3,"Child"],[8,"ScopeParent"],[8,"Scope"],[3,"Stream"],[8,"PartialOrder"],[3,"OperatesEvent"],[3,"ChannelsEvent"],[3,"ProgressEvent"],[3,"MessagesEvent"],[3,"ScheduleEvent"],[4,"StartStop"],[8,"Logger"],[3,"EventStreamLogger"]]};
searchIndex["timely_communication"] = {"doc":"A simple communication infrastructure providing typed exchange channels.","items":[[0,"allocator","timely_communication","Types and traits for the allocation of channels between threads, process, and computers.",null,null],[0,"thread","timely_communication::allocator","",null,null],[3,"Thread","timely_communication::allocator::thread","",null,null],[11,"index","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","",0,null],[11,"new","","",0,null],[0,"process","timely_communication::allocator","",null,null],[3,"Process","timely_communication::allocator::process","",null,null],[11,"inner","","",1,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"new_vector","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"index","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","",1,null],[0,"binary","timely_communication::allocator","",null,null],[3,"Binary","timely_communication::allocator::binary","",null,null],[12,"inner","","",2,null],[12,"index","","",2,null],[12,"peers","","",2,null],[12,"allocated","","",2,null],[12,"readers","","",2,null],[12,"senders","","",2,null],[11,"inner","","",2,{"inputs":[{"name":"self"}],"output":{"name":"process"}}],[11,"index","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","",2,null],[0,"generic","timely_communication::allocator","A generic allocator, wrapping known implementors of `Allocate`.",null,null],[4,"Generic","timely_communication::allocator::generic","Enumerates known implementors of `Allocate`. Passes trait method calls on to members.",null,null],[13,"Thread","","",3,null],[13,"Process","","",3,null],[13,"Binary","","",3,null],[11,"index","","The index of the worker out of `(0..self.peers())`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","The number of workers.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","Constructs several send endpoints and one receive endpoint.",3,null],[11,"index","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","",3,null],[8,"Allocate","timely_communication::allocator","",null,null],[10,"index","","The index of the worker out of `(0..self.peers())`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"peers","","The number of workers.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"allocate","","Constructs several send endpoints and one receive endpoint.",4,null],[0,"initialize","timely_communication","Initialization logic for a generic instance of the `Allocate` channel allocation trait.",null,null],[3,"WorkerGuards","timely_communication::initialize","Maintains `JoinHandle`s for worker threads.",null,null],[4,"Configuration","","Possible configurations for the communication infrastructure.",null,null],[13,"Thread","","Use one thread.",5,null],[13,"Process","","Use one process with an indicated number of threads.",5,null],[13,"Cluster","","Expect multiple processes indicated by `(threads, process, host_list, report)`.",5,null],[5,"initialize","","Initializes communication and executes a distributed computation.",null,{"inputs":[{"name":"configuration"},{"name":"f"}],"output":{"name":"result"}}],[11,"from_args","","Constructs a new configuration by parsing supplied text arguments.",5,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"join","","Waits on the worker threads and returns the results they produce.",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[8,"Data","timely_communication","A composite trait for types that may be used with channels.",null,null],[8,"Serialize","","Conversions to and from `Vec<u8>`.",null,null],[10,"into_bytes","","Append the binary representation of `self` to a vector of bytes. The `&mut self` argument may be mutated, but the second argument should only be appended to.",7,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[10,"from_bytes","","Recover an instance of Self from its binary representation. The `&mut Vec<u8>` argument may be taken with `mem::replace` if it is needed.",7,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[8,"Push","","Pushing elements of type `T`.",null,null],[10,"push","","Pushes `element` and provides the opportunity to take ownership.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"send","","Pushes `element` and drops any resulting resources.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"done","","Pushes `None`, conventionally signalling a flush.",8,{"inputs":[{"name":"self"}],"output":null}],[8,"Pull","","Pulling elements of type `T`.",null,null],[10,"pull","","Pulls an element and provides the opportunity to take ownership.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"recv","","Takes an `Option<T>` and leaves `None` behind.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Thread"],[3,"Process"],[3,"Binary"],[4,"Generic"],[8,"Allocate"],[4,"Configuration"],[3,"WorkerGuards"],[8,"Serialize"],[8,"Push"],[8,"Pull"]]};
searchIndex["timely_sort"] = {"doc":"Types and traits for radix sorting.","items":[[3,"LSBRadixSorter","timely_sort","A few buffers capable of radix sorting by least significant byte.",null,null],[3,"LSBSWCRadixSorter","","A few buffers capable of radix sorting by least significant byte.",null,null],[3,"MSBRadixSorter","","A \"most-significant byte\" (MSB) radix sorter.",null,null],[11,"push","","",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":null}],[11,"push_batch","","",0,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"finish_into","","",0,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"rebalance","","",0,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"usize"}],"output":null}],[11,"push","","",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":null}],[11,"push_batch","","",1,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"finish_into","","",1,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"new","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"rebalance","","",1,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"usize"}],"output":null}],[11,"push","","",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":null}],[11,"push_batch","","",2,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"finish_into","","",2,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"sort","","",2,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"new","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"rebalance","","",2,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"usize"}],"output":null}],[11,"finish_into_and","","Finishes the sorting for the session, using the supplied finalizing action when given the option to exit early.",2,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"},{"name":"l"}],"output":null}],[11,"sort_and","","Radix sorts a sequence of buffers, possibly stopping early on small batches and calling `action`.",2,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"},{"name":"l"}],"output":null}],[8,"Unsigned","","An unsigned integer fit for use as a radix key.",null,null],[10,"bytes","","",3,{"inputs":[],"output":{"name":"usize"}}],[10,"as_u64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"RadixSorter","","Functionality provided by a radix sorter.",null,null],[10,"push","","Pushes a single element using the supplied radix key function.",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":null}],[10,"push_batch","","Pushes a batch of elements using the supplied radix key function.",4,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"extend","","Pushes a sequence of elements using the supplied radix key function.",4,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":null}],[11,"finish","","Completes the sorting session and returns the sorted results.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vec"}}],[10,"finish_into","","Completes the sorting session and puts the sorted results into `target`.",4,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"sort","","Sorts batched data using the supplied radix key function.",4,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[8,"RadixSorterBase","","Functionality independent of the type `U` used to sort.",null,null],[10,"new","","Allocates a new instance of the radix sorter.",5,{"inputs":[],"output":{"name":"self"}}],[11,"recycle","","Provides empty buffers for the radix sorter to use.",5,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[10,"rebalance","","Provides empty buffers for the radix sorter to use, with the intent that it should own at most `intended`.",5,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"usize"}],"output":null}]],"paths":[[3,"LSBRadixSorter"],[3,"LSBSWCRadixSorter"],[3,"MSBRadixSorter"],[8,"Unsigned"],[8,"RadixSorter"],[8,"RadixSorterBase"]]};
initSearch(searchIndex);
