initSidebarItems({"mod":[["aggregation","Aggregation operators of various flavors"],["binary","Methods to construct generic streaming and blocking binary operators."],["broadcast","Broadcast records to all workers."],["capture","Operators which capture and replay streams of records."],["concat","Merges the contents of multiple streams."],["count","Counts the number of records at each time."],["delay","Operators acting on timestamps to logically delay records"],["enterleave","Extension traits to move a `Stream` between an outer `Scope` and inner `Scope`."],["exchange","Exchange records between workers."],["feedback","Create cycles in a timely dataflow graph."],["filter","Filters a stream by a predicate."],["input","Create new `Streams` connected to external inputs."],["inspect","Extension trait and implementation for observing and action on streamed data."],["map","Extension methods for `Stream` based on record-by-record transformation."],["operator","Methods to construct generic streaming and blocking unary operators."],["partition","Partition a stream of records into multiple streams."],["probe","Monitor progress at a `Stream`."],["reclock","Extension methods for `Stream` based on record-by-record transformation."],["to_stream","Conversion to the `Stream` type from iterators."],["unary","Methods to construct generic streaming and blocking unary operators."],["unordered_input","Create new `Streams` connected to external inputs."]],"struct":[["Capability","The capability to send data with a certain timestamp on a dataflow edge."],["CapabilitySet","A set of capabilities, for possibly incomparable times."],["FrontierNotificator","Tracks requests for notification and delivers available notifications."],["FrontieredInputHandle","Handle to an operator's input stream and frontier."],["InputHandle","Handle to an operator's input stream."],["Notificator","Tracks requests for notification and delivers available notifications."],["OutputHandle","Handle to an operator's output stream."]]});